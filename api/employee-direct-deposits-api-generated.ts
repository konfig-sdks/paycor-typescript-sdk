/* tslint:disable */
/* eslint-disable */
/*
Paycor Public API


Welcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section. 

# Getting Started

<strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>

# GET, PUT, POST

* When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc]. 
* When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system.
* When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'


# Error Handling

* 400: Please consult the response text to correct your request information. 
* 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key. 
* 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header.
* 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen. 
* 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state. 
* 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.
  * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs). 
* 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.


# IDs

* ClientId = LegalEntityId
* TenantId = CompanyId
* EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API

# Earnings, Deductions, Taxes

This section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints. 

Paycor stores Earnings, Deductions, and Taxes each at three levels:
* Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):
  * Earnings: REG, OT
  * Taxes: FITWH, SOC, SOCER, OHCIN
  * Deductions: 401k, KMat, H125, UWay
* Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code. 
  * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints. 
* Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code
  * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden. 

# Authentication

<!-- ReDoc-Inject: <security-definitions> -->

The version of the OpenAPI document: 


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AccountType } from '../models';
// @ts-ignore
import { CreateOrUpdateResponse } from '../models';
// @ts-ignore
import { DirectDepositType } from '../models';
// @ts-ignore
import { EmployeeDirectDeposit } from '../models';
// @ts-ignore
import { EmployeeDirectDeposit2 } from '../models';
// @ts-ignore
import { EmployeeDirectDeposit3 } from '../models';
// @ts-ignore
import { EmployeeHsaDirectDeposit } from '../models';
// @ts-ignore
import { EmployeeHsaDirectDeposit2 } from '../models';
// @ts-ignore
import { PagedResultOfEmployeeDirectDeposit } from '../models';
// @ts-ignore
import { PayFrequency } from '../models';
// @ts-ignore
import { PaycorError } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EmployeeDirectDepositsApi - axios parameter creator
 * @export
 */
export const EmployeeDirectDepositsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Data Access: Add Employee Direct Deposit
         * @summary Add Employee Direct Deposits by EmployeeID
         * @param {string} employeeId Id of employee for which you want to add Direct Deposits
         * @param {EmployeeDirectDeposit2} employeeDirectDeposit2 Direct Deposit object to insert
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addByEmployeeId: async (employeeId: string, employeeDirectDeposit2: EmployeeDirectDeposit2, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('addByEmployeeId', 'employeeId', employeeId)
            // verify required parameter 'employeeDirectDeposit2' is not null or undefined
            assertParamExists('addByEmployeeId', 'employeeDirectDeposit2', employeeDirectDeposit2)
            const localVarPath = `/v1/employees/{employeeId}/DirectDeposits`
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Access-Token required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "accessToken", configuration })
            // authentication Apim-Subscription-Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Ocp-Apim-Subscription-Key", keyParamName: "apimSubscriptionKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeeDirectDeposit2,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employeeId}/DirectDeposits',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeeDirectDeposit2, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Data Access: Add Employee HSA Account
         * @summary Add Employee HSA Direct Deposits by EmployeeID
         * @param {string} employeeId ID of employee for which you want to add HSA Direct Deposits
         * @param {EmployeeHsaDirectDeposit} employeeHsaDirectDeposit HSA Direct Deposit object to insert
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addByEmployeeIdHsa: async (employeeId: string, employeeHsaDirectDeposit: EmployeeHsaDirectDeposit, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('addByEmployeeIdHsa', 'employeeId', employeeId)
            // verify required parameter 'employeeHsaDirectDeposit' is not null or undefined
            assertParamExists('addByEmployeeIdHsa', 'employeeHsaDirectDeposit', employeeHsaDirectDeposit)
            const localVarPath = `/v1/employees/{employeeId}/HSAaccounts`
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Access-Token required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "accessToken", configuration })
            // authentication Apim-Subscription-Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Ocp-Apim-Subscription-Key", keyParamName: "apimSubscriptionKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeeHsaDirectDeposit,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employeeId}/HSAaccounts',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeeHsaDirectDeposit, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Data Access: View Employee Direct Deposit Information by Direct Deposit Id
         * @summary Get Employee Direct Deposit by EmployeeID and DirectDepositID
         * @param {string} employeeId ID of employee for which you want to get Direct Deposits
         * @param {string} directDepositId ID of an employee direct deposit which you want to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByEmployeeAndDepositId: async (employeeId: string, directDepositId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getByEmployeeAndDepositId', 'employeeId', employeeId)
            // verify required parameter 'directDepositId' is not null or undefined
            assertParamExists('getByEmployeeAndDepositId', 'directDepositId', directDepositId)
            const localVarPath = `/v1/employees/{employeeId}/DirectDeposits/{directDepositId}`
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)))
                .replace(`{${"directDepositId"}}`, encodeURIComponent(String(directDepositId !== undefined ? directDepositId : `-directDepositId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Access-Token required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "accessToken", configuration })
            // authentication Apim-Subscription-Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Ocp-Apim-Subscription-Key", keyParamName: "apimSubscriptionKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employeeId}/DirectDeposits/{directDepositId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Data Access: View Employee Direct Deposit Information by Employee Id
         * @summary Get Employee Direct Deposits by EmployeeID
         * @param {string} employeeId ID of employee for which you want to get Direct Deposits
         * @param {string} [continuationToken] Token to get next set of direct deposits
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByEmployeeId: async (employeeId: string, continuationToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getByEmployeeId', 'employeeId', employeeId)
            const localVarPath = `/v1/employees/{employeeId}/DirectDeposits`
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Access-Token required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "accessToken", configuration })
            // authentication Apim-Subscription-Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Ocp-Apim-Subscription-Key", keyParamName: "apimSubscriptionKey", configuration })
            if (continuationToken !== undefined) {
                localVarQueryParameter['continuationToken'] = continuationToken;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employeeId}/DirectDeposits',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Data Access: View Employee HSA Account Information
         * @summary Get Employee HSA Direct Deposits by EmployeeID
         * @param {string} employeeId ID of employee for whom you want to get HSA Direct Deposits
         * @param {string} [continuationToken] Token to get next set of HSA Direct Deposits
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByEmployeeIdHSA: async (employeeId: string, continuationToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getByEmployeeIdHSA', 'employeeId', employeeId)
            const localVarPath = `/v1/employees/{employeeId}/HSAaccounts`
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Access-Token required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "accessToken", configuration })
            // authentication Apim-Subscription-Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Ocp-Apim-Subscription-Key", keyParamName: "apimSubscriptionKey", configuration })
            if (continuationToken !== undefined) {
                localVarQueryParameter['continuationToken'] = continuationToken;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employeeId}/HSAaccounts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Data Access: Update Employee Direct Deposit Information
         * @summary Update Employee Direct Deposits by EmployeeID
         * @param {string} employeeId ID of employee for which you want to update Direct Deposit
         * @param {EmployeeDirectDeposit3} employeeDirectDeposit3 Employee Direct Deposit object with updated fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByEmployeeIdDDD: async (employeeId: string, employeeDirectDeposit3: EmployeeDirectDeposit3, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('updateByEmployeeIdDDD', 'employeeId', employeeId)
            // verify required parameter 'employeeDirectDeposit3' is not null or undefined
            assertParamExists('updateByEmployeeIdDDD', 'employeeDirectDeposit3', employeeDirectDeposit3)
            const localVarPath = `/v1/employees/{employeeId}/DirectDeposits`
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Access-Token required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "accessToken", configuration })
            // authentication Apim-Subscription-Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Ocp-Apim-Subscription-Key", keyParamName: "apimSubscriptionKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeeDirectDeposit3,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employeeId}/DirectDeposits',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeeDirectDeposit3, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Data Access: Update Employee HSA Account Information
         * @summary Update Employee HSA Direct Deposits by EmployeeID
         * @param {string} employeeId ID of employee for which you want to update HSA Direct Deposits
         * @param {EmployeeHsaDirectDeposit2} employeeHsaDirectDeposit2 HSA Employee Direct Deposit object with updated fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateHsaDirectDepositsByEmployeeId: async (employeeId: string, employeeHsaDirectDeposit2: EmployeeHsaDirectDeposit2, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('updateHsaDirectDepositsByEmployeeId', 'employeeId', employeeId)
            // verify required parameter 'employeeHsaDirectDeposit2' is not null or undefined
            assertParamExists('updateHsaDirectDepositsByEmployeeId', 'employeeHsaDirectDeposit2', employeeHsaDirectDeposit2)
            const localVarPath = `/v1/employees/{employeeId}/HSAaccounts`
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Access-Token required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "accessToken", configuration })
            // authentication Apim-Subscription-Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Ocp-Apim-Subscription-Key", keyParamName: "apimSubscriptionKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeeHsaDirectDeposit2,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employeeId}/HSAaccounts',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeeHsaDirectDeposit2, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployeeDirectDepositsApi - functional programming interface
 * @export
 */
export const EmployeeDirectDepositsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmployeeDirectDepositsApiAxiosParamCreator(configuration)
    return {
        /**
         * Data Access: Add Employee Direct Deposit
         * @summary Add Employee Direct Deposits by EmployeeID
         * @param {EmployeeDirectDepositsApiAddByEmployeeIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addByEmployeeId(requestParameters: EmployeeDirectDepositsApiAddByEmployeeIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOrUpdateResponse>> {
            const employeeDirectDeposit2: EmployeeDirectDeposit2 = {
                AccountType: requestParameters.AccountType,
                AccountNumber: requestParameters.AccountNumber,
                RoutingNumber: requestParameters.RoutingNumber,
                Frequency: requestParameters.Frequency,
                DeductionCode: requestParameters.DeductionCode,
                DirectDepositType: requestParameters.DirectDepositType,
                OnHold: requestParameters.OnHold,
                Amount: requestParameters.Amount,
                Rate: requestParameters.Rate
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addByEmployeeId(requestParameters.employeeId, employeeDirectDeposit2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Data Access: Add Employee HSA Account
         * @summary Add Employee HSA Direct Deposits by EmployeeID
         * @param {EmployeeDirectDepositsApiAddByEmployeeIdHsaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addByEmployeeIdHsa(requestParameters: EmployeeDirectDepositsApiAddByEmployeeIdHsaRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOrUpdateResponse>> {
            const employeeHsaDirectDeposit: EmployeeHsaDirectDeposit = {
                AccountType: requestParameters.AccountType,
                AccountNumber: requestParameters.AccountNumber,
                RoutingNumber: requestParameters.RoutingNumber,
                Frequency: requestParameters.Frequency,
                DeductionCode: requestParameters.DeductionCode,
                OnHold: requestParameters.OnHold,
                Amount: requestParameters.Amount,
                Rate: requestParameters.Rate
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addByEmployeeIdHsa(requestParameters.employeeId, employeeHsaDirectDeposit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Data Access: View Employee Direct Deposit Information by Direct Deposit Id
         * @summary Get Employee Direct Deposit by EmployeeID and DirectDepositID
         * @param {EmployeeDirectDepositsApiGetByEmployeeAndDepositIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByEmployeeAndDepositId(requestParameters: EmployeeDirectDepositsApiGetByEmployeeAndDepositIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeDirectDeposit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByEmployeeAndDepositId(requestParameters.employeeId, requestParameters.directDepositId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Data Access: View Employee Direct Deposit Information by Employee Id
         * @summary Get Employee Direct Deposits by EmployeeID
         * @param {EmployeeDirectDepositsApiGetByEmployeeIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByEmployeeId(requestParameters: EmployeeDirectDepositsApiGetByEmployeeIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedResultOfEmployeeDirectDeposit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByEmployeeId(requestParameters.employeeId, requestParameters.continuationToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Data Access: View Employee HSA Account Information
         * @summary Get Employee HSA Direct Deposits by EmployeeID
         * @param {EmployeeDirectDepositsApiGetByEmployeeIdHSARequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByEmployeeIdHSA(requestParameters: EmployeeDirectDepositsApiGetByEmployeeIdHSARequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedResultOfEmployeeDirectDeposit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByEmployeeIdHSA(requestParameters.employeeId, requestParameters.continuationToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Data Access: Update Employee Direct Deposit Information
         * @summary Update Employee Direct Deposits by EmployeeID
         * @param {EmployeeDirectDepositsApiUpdateByEmployeeIdDDDRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByEmployeeIdDDD(requestParameters: EmployeeDirectDepositsApiUpdateByEmployeeIdDDDRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOrUpdateResponse>> {
            const employeeDirectDeposit3: EmployeeDirectDeposit3 = {
                Id: requestParameters.Id,
                AccountType: requestParameters.AccountType,
                AccountNumber: requestParameters.AccountNumber,
                RoutingNumber: requestParameters.RoutingNumber,
                Frequency: requestParameters.Frequency,
                DirectDepositType: requestParameters.DirectDepositType,
                OnHold: requestParameters.OnHold,
                Amount: requestParameters.Amount,
                Rate: requestParameters.Rate
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByEmployeeIdDDD(requestParameters.employeeId, employeeDirectDeposit3, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Data Access: Update Employee HSA Account Information
         * @summary Update Employee HSA Direct Deposits by EmployeeID
         * @param {EmployeeDirectDepositsApiUpdateHsaDirectDepositsByEmployeeIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateHsaDirectDepositsByEmployeeId(requestParameters: EmployeeDirectDepositsApiUpdateHsaDirectDepositsByEmployeeIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOrUpdateResponse>> {
            const employeeHsaDirectDeposit2: EmployeeHsaDirectDeposit2 = {
                Id: requestParameters.Id,
                AccountType: requestParameters.AccountType,
                AccountNumber: requestParameters.AccountNumber,
                RoutingNumber: requestParameters.RoutingNumber,
                Frequency: requestParameters.Frequency,
                OnHold: requestParameters.OnHold,
                Amount: requestParameters.Amount,
                Rate: requestParameters.Rate
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateHsaDirectDepositsByEmployeeId(requestParameters.employeeId, employeeHsaDirectDeposit2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmployeeDirectDepositsApi - factory interface
 * @export
 */
export const EmployeeDirectDepositsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmployeeDirectDepositsApiFp(configuration)
    return {
        /**
         * Data Access: Add Employee Direct Deposit
         * @summary Add Employee Direct Deposits by EmployeeID
         * @param {EmployeeDirectDepositsApiAddByEmployeeIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addByEmployeeId(requestParameters: EmployeeDirectDepositsApiAddByEmployeeIdRequest, options?: AxiosRequestConfig): AxiosPromise<CreateOrUpdateResponse> {
            return localVarFp.addByEmployeeId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Data Access: Add Employee HSA Account
         * @summary Add Employee HSA Direct Deposits by EmployeeID
         * @param {EmployeeDirectDepositsApiAddByEmployeeIdHsaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addByEmployeeIdHsa(requestParameters: EmployeeDirectDepositsApiAddByEmployeeIdHsaRequest, options?: AxiosRequestConfig): AxiosPromise<CreateOrUpdateResponse> {
            return localVarFp.addByEmployeeIdHsa(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Data Access: View Employee Direct Deposit Information by Direct Deposit Id
         * @summary Get Employee Direct Deposit by EmployeeID and DirectDepositID
         * @param {EmployeeDirectDepositsApiGetByEmployeeAndDepositIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByEmployeeAndDepositId(requestParameters: EmployeeDirectDepositsApiGetByEmployeeAndDepositIdRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeeDirectDeposit> {
            return localVarFp.getByEmployeeAndDepositId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Data Access: View Employee Direct Deposit Information by Employee Id
         * @summary Get Employee Direct Deposits by EmployeeID
         * @param {EmployeeDirectDepositsApiGetByEmployeeIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByEmployeeId(requestParameters: EmployeeDirectDepositsApiGetByEmployeeIdRequest, options?: AxiosRequestConfig): AxiosPromise<PagedResultOfEmployeeDirectDeposit> {
            return localVarFp.getByEmployeeId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Data Access: View Employee HSA Account Information
         * @summary Get Employee HSA Direct Deposits by EmployeeID
         * @param {EmployeeDirectDepositsApiGetByEmployeeIdHSARequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByEmployeeIdHSA(requestParameters: EmployeeDirectDepositsApiGetByEmployeeIdHSARequest, options?: AxiosRequestConfig): AxiosPromise<PagedResultOfEmployeeDirectDeposit> {
            return localVarFp.getByEmployeeIdHSA(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Data Access: Update Employee Direct Deposit Information
         * @summary Update Employee Direct Deposits by EmployeeID
         * @param {EmployeeDirectDepositsApiUpdateByEmployeeIdDDDRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByEmployeeIdDDD(requestParameters: EmployeeDirectDepositsApiUpdateByEmployeeIdDDDRequest, options?: AxiosRequestConfig): AxiosPromise<CreateOrUpdateResponse> {
            return localVarFp.updateByEmployeeIdDDD(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Data Access: Update Employee HSA Account Information
         * @summary Update Employee HSA Direct Deposits by EmployeeID
         * @param {EmployeeDirectDepositsApiUpdateHsaDirectDepositsByEmployeeIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateHsaDirectDepositsByEmployeeId(requestParameters: EmployeeDirectDepositsApiUpdateHsaDirectDepositsByEmployeeIdRequest, options?: AxiosRequestConfig): AxiosPromise<CreateOrUpdateResponse> {
            return localVarFp.updateHsaDirectDepositsByEmployeeId(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addByEmployeeId operation in EmployeeDirectDepositsApi.
 * @export
 * @interface EmployeeDirectDepositsApiAddByEmployeeIdRequest
 */
export type EmployeeDirectDepositsApiAddByEmployeeIdRequest = {
    
    /**
    * Id of employee for which you want to add Direct Deposits
    * @type {string}
    * @memberof EmployeeDirectDepositsApiAddByEmployeeId
    */
    readonly employeeId: string
    
} & EmployeeDirectDeposit2

/**
 * Request parameters for addByEmployeeIdHsa operation in EmployeeDirectDepositsApi.
 * @export
 * @interface EmployeeDirectDepositsApiAddByEmployeeIdHsaRequest
 */
export type EmployeeDirectDepositsApiAddByEmployeeIdHsaRequest = {
    
    /**
    * ID of employee for which you want to add HSA Direct Deposits
    * @type {string}
    * @memberof EmployeeDirectDepositsApiAddByEmployeeIdHsa
    */
    readonly employeeId: string
    
} & EmployeeHsaDirectDeposit

/**
 * Request parameters for getByEmployeeAndDepositId operation in EmployeeDirectDepositsApi.
 * @export
 * @interface EmployeeDirectDepositsApiGetByEmployeeAndDepositIdRequest
 */
export type EmployeeDirectDepositsApiGetByEmployeeAndDepositIdRequest = {
    
    /**
    * ID of employee for which you want to get Direct Deposits
    * @type {string}
    * @memberof EmployeeDirectDepositsApiGetByEmployeeAndDepositId
    */
    readonly employeeId: string
    
    /**
    * ID of an employee direct deposit which you want to retrieve
    * @type {string}
    * @memberof EmployeeDirectDepositsApiGetByEmployeeAndDepositId
    */
    readonly directDepositId: string
    
}

/**
 * Request parameters for getByEmployeeId operation in EmployeeDirectDepositsApi.
 * @export
 * @interface EmployeeDirectDepositsApiGetByEmployeeIdRequest
 */
export type EmployeeDirectDepositsApiGetByEmployeeIdRequest = {
    
    /**
    * ID of employee for which you want to get Direct Deposits
    * @type {string}
    * @memberof EmployeeDirectDepositsApiGetByEmployeeId
    */
    readonly employeeId: string
    
    /**
    * Token to get next set of direct deposits
    * @type {string}
    * @memberof EmployeeDirectDepositsApiGetByEmployeeId
    */
    readonly continuationToken?: string
    
}

/**
 * Request parameters for getByEmployeeIdHSA operation in EmployeeDirectDepositsApi.
 * @export
 * @interface EmployeeDirectDepositsApiGetByEmployeeIdHSARequest
 */
export type EmployeeDirectDepositsApiGetByEmployeeIdHSARequest = {
    
    /**
    * ID of employee for whom you want to get HSA Direct Deposits
    * @type {string}
    * @memberof EmployeeDirectDepositsApiGetByEmployeeIdHSA
    */
    readonly employeeId: string
    
    /**
    * Token to get next set of HSA Direct Deposits
    * @type {string}
    * @memberof EmployeeDirectDepositsApiGetByEmployeeIdHSA
    */
    readonly continuationToken?: string
    
}

/**
 * Request parameters for updateByEmployeeIdDDD operation in EmployeeDirectDepositsApi.
 * @export
 * @interface EmployeeDirectDepositsApiUpdateByEmployeeIdDDDRequest
 */
export type EmployeeDirectDepositsApiUpdateByEmployeeIdDDDRequest = {
    
    /**
    * ID of employee for which you want to update Direct Deposit
    * @type {string}
    * @memberof EmployeeDirectDepositsApiUpdateByEmployeeIdDDD
    */
    readonly employeeId: string
    
} & EmployeeDirectDeposit3

/**
 * Request parameters for updateHsaDirectDepositsByEmployeeId operation in EmployeeDirectDepositsApi.
 * @export
 * @interface EmployeeDirectDepositsApiUpdateHsaDirectDepositsByEmployeeIdRequest
 */
export type EmployeeDirectDepositsApiUpdateHsaDirectDepositsByEmployeeIdRequest = {
    
    /**
    * ID of employee for which you want to update HSA Direct Deposits
    * @type {string}
    * @memberof EmployeeDirectDepositsApiUpdateHsaDirectDepositsByEmployeeId
    */
    readonly employeeId: string
    
} & EmployeeHsaDirectDeposit2

/**
 * EmployeeDirectDepositsApiGenerated - object-oriented interface
 * @export
 * @class EmployeeDirectDepositsApiGenerated
 * @extends {BaseAPI}
 */
export class EmployeeDirectDepositsApiGenerated extends BaseAPI {
    /**
     * Data Access: Add Employee Direct Deposit
     * @summary Add Employee Direct Deposits by EmployeeID
     * @param {EmployeeDirectDepositsApiAddByEmployeeIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeDirectDepositsApiGenerated
     */
    public addByEmployeeId(requestParameters: EmployeeDirectDepositsApiAddByEmployeeIdRequest, options?: AxiosRequestConfig) {
        return EmployeeDirectDepositsApiFp(this.configuration).addByEmployeeId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Data Access: Add Employee HSA Account
     * @summary Add Employee HSA Direct Deposits by EmployeeID
     * @param {EmployeeDirectDepositsApiAddByEmployeeIdHsaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeDirectDepositsApiGenerated
     */
    public addByEmployeeIdHsa(requestParameters: EmployeeDirectDepositsApiAddByEmployeeIdHsaRequest, options?: AxiosRequestConfig) {
        return EmployeeDirectDepositsApiFp(this.configuration).addByEmployeeIdHsa(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Data Access: View Employee Direct Deposit Information by Direct Deposit Id
     * @summary Get Employee Direct Deposit by EmployeeID and DirectDepositID
     * @param {EmployeeDirectDepositsApiGetByEmployeeAndDepositIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeDirectDepositsApiGenerated
     */
    public getByEmployeeAndDepositId(requestParameters: EmployeeDirectDepositsApiGetByEmployeeAndDepositIdRequest, options?: AxiosRequestConfig) {
        return EmployeeDirectDepositsApiFp(this.configuration).getByEmployeeAndDepositId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Data Access: View Employee Direct Deposit Information by Employee Id
     * @summary Get Employee Direct Deposits by EmployeeID
     * @param {EmployeeDirectDepositsApiGetByEmployeeIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeDirectDepositsApiGenerated
     */
    public getByEmployeeId(requestParameters: EmployeeDirectDepositsApiGetByEmployeeIdRequest, options?: AxiosRequestConfig) {
        return EmployeeDirectDepositsApiFp(this.configuration).getByEmployeeId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Data Access: View Employee HSA Account Information
     * @summary Get Employee HSA Direct Deposits by EmployeeID
     * @param {EmployeeDirectDepositsApiGetByEmployeeIdHSARequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeDirectDepositsApiGenerated
     */
    public getByEmployeeIdHSA(requestParameters: EmployeeDirectDepositsApiGetByEmployeeIdHSARequest, options?: AxiosRequestConfig) {
        return EmployeeDirectDepositsApiFp(this.configuration).getByEmployeeIdHSA(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Data Access: Update Employee Direct Deposit Information
     * @summary Update Employee Direct Deposits by EmployeeID
     * @param {EmployeeDirectDepositsApiUpdateByEmployeeIdDDDRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeDirectDepositsApiGenerated
     */
    public updateByEmployeeIdDDD(requestParameters: EmployeeDirectDepositsApiUpdateByEmployeeIdDDDRequest, options?: AxiosRequestConfig) {
        return EmployeeDirectDepositsApiFp(this.configuration).updateByEmployeeIdDDD(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Data Access: Update Employee HSA Account Information
     * @summary Update Employee HSA Direct Deposits by EmployeeID
     * @param {EmployeeDirectDepositsApiUpdateHsaDirectDepositsByEmployeeIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeDirectDepositsApiGenerated
     */
    public updateHsaDirectDepositsByEmployeeId(requestParameters: EmployeeDirectDepositsApiUpdateHsaDirectDepositsByEmployeeIdRequest, options?: AxiosRequestConfig) {
        return EmployeeDirectDepositsApiFp(this.configuration).updateHsaDirectDepositsByEmployeeId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
