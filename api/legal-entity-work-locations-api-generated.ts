/* tslint:disable */
/* eslint-disable */
/*
Paycor Public API


Welcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section. 

# Getting Started

<strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>

# GET, PUT, POST

* When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc]. 
* When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system.
* When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'


# Error Handling

* 400: Please consult the response text to correct your request information. 
* 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key. 
* 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header.
* 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen. 
* 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state. 
* 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.
  * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs). 
* 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.


# IDs

* ClientId = LegalEntityId
* TenantId = CompanyId
* EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API

# Earnings, Deductions, Taxes

This section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints. 

Paycor stores Earnings, Deductions, and Taxes each at three levels:
* Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):
  * Earnings: REG, OT
  * Taxes: FITWH, SOC, SOCER, OHCIN
  * Deductions: 401k, KMat, H125, UWay
* Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code. 
  * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints. 
* Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code
  * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden. 

# Authentication

<!-- ReDoc-Inject: <security-definitions> -->

The version of the OpenAPI document: 


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateOrUpdateResponse } from '../models';
// @ts-ignore
import { LegalEntityWorkLocation } from '../models';
// @ts-ignore
import { PagedResultOfLegalEntityWorkLocation } from '../models';
// @ts-ignore
import { PaycorError } from '../models';
// @ts-ignore
import { WorkLocation } from '../models';
// @ts-ignore
import { WorkLocation2 } from '../models';
// @ts-ignore
import { WorkLocationAddress } from '../models';
// @ts-ignore
import { WorkLocationAddressUpdate } from '../models';
// @ts-ignore
import { WorkLocationPhoneNumber } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * LegalEntityWorkLocationsApi - axios parameter creator
 * @export
 */
export const LegalEntityWorkLocationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Data Access: Create Legal Entity Work Location
         * @summary Add Work Location By Legal Entity ID
         * @param {number} legalEntityId 
         * @param {WorkLocation} workLocation Create Work Location model
         * @param {boolean} [addressData] Use Physical Address as mailing address?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addByLegalEntityId: async (legalEntityId: number, workLocation: WorkLocation, addressData?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'legalEntityId' is not null or undefined
            assertParamExists('addByLegalEntityId', 'legalEntityId', legalEntityId)
            // verify required parameter 'workLocation' is not null or undefined
            assertParamExists('addByLegalEntityId', 'workLocation', workLocation)
            const localVarPath = `/v1/legalentities/{legalEntityId}/worklocations`
                .replace(`{${"legalEntityId"}}`, encodeURIComponent(String(legalEntityId !== undefined ? legalEntityId : `-legalEntityId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Access-Token required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "accessToken", configuration })
            // authentication Apim-Subscription-Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Ocp-Apim-Subscription-Key", keyParamName: "apimSubscriptionKey", configuration })
            if (addressData !== undefined) {
                localVarQueryParameter['addressData'] = addressData;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: workLocation,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/legalentities/{legalEntityId}/worklocations',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(workLocation, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Data Access: Delete Legal Entity Work Location
         * @summary Delete Work Location By Work Location ID And Legal Entity ID
         * @param {number} legalEntityId ID of the Legal Entity for which you want to delete Work Location
         * @param {string} workLocationId ID of the Work Location
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteByLegalEntityAndWorkLocationId: async (legalEntityId: number, workLocationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'legalEntityId' is not null or undefined
            assertParamExists('deleteByLegalEntityAndWorkLocationId', 'legalEntityId', legalEntityId)
            // verify required parameter 'workLocationId' is not null or undefined
            assertParamExists('deleteByLegalEntityAndWorkLocationId', 'workLocationId', workLocationId)
            const localVarPath = `/v1/legalentities/{legalEntityId}/worklocations/{workLocationId}`
                .replace(`{${"legalEntityId"}}`, encodeURIComponent(String(legalEntityId !== undefined ? legalEntityId : `-legalEntityId-`)))
                .replace(`{${"workLocationId"}}`, encodeURIComponent(String(workLocationId !== undefined ? workLocationId : `-workLocationId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Access-Token required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "accessToken", configuration })
            // authentication Apim-Subscription-Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Ocp-Apim-Subscription-Key", keyParamName: "apimSubscriptionKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/legalentities/{legalEntityId}/worklocations/{workLocationId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Data Access: View Legal Entity Work Location
         * @summary Get a Work Location for a Legal Entity By Legal Entity ID and Work Location ID
         * @param {number} legalEntityId ID of the Legal Entity for which you want to get the work location
         * @param {string} workLocationId ID of the Work Location
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByLegalEntityAndLocation: async (legalEntityId: number, workLocationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'legalEntityId' is not null or undefined
            assertParamExists('getByLegalEntityAndLocation', 'legalEntityId', legalEntityId)
            // verify required parameter 'workLocationId' is not null or undefined
            assertParamExists('getByLegalEntityAndLocation', 'workLocationId', workLocationId)
            const localVarPath = `/v1/legalentities/{legalEntityId}/worklocations/{workLocationId}`
                .replace(`{${"legalEntityId"}}`, encodeURIComponent(String(legalEntityId !== undefined ? legalEntityId : `-legalEntityId-`)))
                .replace(`{${"workLocationId"}}`, encodeURIComponent(String(workLocationId !== undefined ? workLocationId : `-workLocationId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Access-Token required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "accessToken", configuration })
            // authentication Apim-Subscription-Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Ocp-Apim-Subscription-Key", keyParamName: "apimSubscriptionKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/legalentities/{legalEntityId}/worklocations/{workLocationId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Data Access: View Legal Entity Work Locations
         * @summary Get a list of Work Locations for a Legal Entity
         * @param {number} legalEntityId ID of the Legal Entity for which you want to get the work locations
         * @param {string} [continuationToken] Token to get the next set of work locations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (legalEntityId: number, continuationToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'legalEntityId' is not null or undefined
            assertParamExists('list', 'legalEntityId', legalEntityId)
            const localVarPath = `/v1/legalentities/{legalEntityId}/worklocations`
                .replace(`{${"legalEntityId"}}`, encodeURIComponent(String(legalEntityId !== undefined ? legalEntityId : `-legalEntityId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Access-Token required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "accessToken", configuration })
            // authentication Apim-Subscription-Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Ocp-Apim-Subscription-Key", keyParamName: "apimSubscriptionKey", configuration })
            if (continuationToken !== undefined) {
                localVarQueryParameter['continuationToken'] = continuationToken;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/legalentities/{legalEntityId}/worklocations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Data Access: Update Legal Entity Work Location
         * @summary Update Work Location By Legal Entity ID
         * @param {number} legalEntityId ID of the Legal Entity for which you want to get the work locations
         * @param {WorkLocation2} workLocation2 Update Work Location model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByLegalEntityId: async (legalEntityId: number, workLocation2: WorkLocation2, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'legalEntityId' is not null or undefined
            assertParamExists('updateByLegalEntityId', 'legalEntityId', legalEntityId)
            // verify required parameter 'workLocation2' is not null or undefined
            assertParamExists('updateByLegalEntityId', 'workLocation2', workLocation2)
            const localVarPath = `/v1/legalentities/{legalEntityId}/worklocations`
                .replace(`{${"legalEntityId"}}`, encodeURIComponent(String(legalEntityId !== undefined ? legalEntityId : `-legalEntityId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Access-Token required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "accessToken", configuration })
            // authentication Apim-Subscription-Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Ocp-Apim-Subscription-Key", keyParamName: "apimSubscriptionKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: workLocation2,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/legalentities/{legalEntityId}/worklocations',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(workLocation2, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LegalEntityWorkLocationsApi - functional programming interface
 * @export
 */
export const LegalEntityWorkLocationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LegalEntityWorkLocationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Data Access: Create Legal Entity Work Location
         * @summary Add Work Location By Legal Entity ID
         * @param {LegalEntityWorkLocationsApiAddByLegalEntityIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addByLegalEntityId(requestParameters: LegalEntityWorkLocationsApiAddByLegalEntityIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOrUpdateResponse>> {
            const workLocation: WorkLocation = {
                Name: requestParameters.Name,
                StoreId: requestParameters.StoreId,
                IsFmlaEligible: requestParameters.IsFmlaEligible,
                Addresses: requestParameters.Addresses,
                PhoneNumbers: requestParameters.PhoneNumbers
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addByLegalEntityId(requestParameters.legalEntityId, workLocation, requestParameters.addressData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Data Access: Delete Legal Entity Work Location
         * @summary Delete Work Location By Work Location ID And Legal Entity ID
         * @param {LegalEntityWorkLocationsApiDeleteByLegalEntityAndWorkLocationIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteByLegalEntityAndWorkLocationId(requestParameters: LegalEntityWorkLocationsApiDeleteByLegalEntityAndWorkLocationIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOrUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteByLegalEntityAndWorkLocationId(requestParameters.legalEntityId, requestParameters.workLocationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Data Access: View Legal Entity Work Location
         * @summary Get a Work Location for a Legal Entity By Legal Entity ID and Work Location ID
         * @param {LegalEntityWorkLocationsApiGetByLegalEntityAndLocationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByLegalEntityAndLocation(requestParameters: LegalEntityWorkLocationsApiGetByLegalEntityAndLocationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LegalEntityWorkLocation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByLegalEntityAndLocation(requestParameters.legalEntityId, requestParameters.workLocationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Data Access: View Legal Entity Work Locations
         * @summary Get a list of Work Locations for a Legal Entity
         * @param {LegalEntityWorkLocationsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: LegalEntityWorkLocationsApiListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedResultOfLegalEntityWorkLocation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.legalEntityId, requestParameters.continuationToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Data Access: Update Legal Entity Work Location
         * @summary Update Work Location By Legal Entity ID
         * @param {LegalEntityWorkLocationsApiUpdateByLegalEntityIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByLegalEntityId(requestParameters: LegalEntityWorkLocationsApiUpdateByLegalEntityIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOrUpdateResponse>> {
            const workLocation2: WorkLocation2 = {
                Id: requestParameters.Id,
                Addresses: requestParameters.Addresses,
                PhoneNumbers: requestParameters.PhoneNumbers,
                TimeZone: requestParameters.TimeZone,
                IsFmlaEligible: requestParameters.IsFmlaEligible,
                IsDefault: requestParameters.IsDefault
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByLegalEntityId(requestParameters.legalEntityId, workLocation2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LegalEntityWorkLocationsApi - factory interface
 * @export
 */
export const LegalEntityWorkLocationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LegalEntityWorkLocationsApiFp(configuration)
    return {
        /**
         * Data Access: Create Legal Entity Work Location
         * @summary Add Work Location By Legal Entity ID
         * @param {LegalEntityWorkLocationsApiAddByLegalEntityIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addByLegalEntityId(requestParameters: LegalEntityWorkLocationsApiAddByLegalEntityIdRequest, options?: AxiosRequestConfig): AxiosPromise<CreateOrUpdateResponse> {
            return localVarFp.addByLegalEntityId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Data Access: Delete Legal Entity Work Location
         * @summary Delete Work Location By Work Location ID And Legal Entity ID
         * @param {LegalEntityWorkLocationsApiDeleteByLegalEntityAndWorkLocationIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteByLegalEntityAndWorkLocationId(requestParameters: LegalEntityWorkLocationsApiDeleteByLegalEntityAndWorkLocationIdRequest, options?: AxiosRequestConfig): AxiosPromise<CreateOrUpdateResponse> {
            return localVarFp.deleteByLegalEntityAndWorkLocationId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Data Access: View Legal Entity Work Location
         * @summary Get a Work Location for a Legal Entity By Legal Entity ID and Work Location ID
         * @param {LegalEntityWorkLocationsApiGetByLegalEntityAndLocationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByLegalEntityAndLocation(requestParameters: LegalEntityWorkLocationsApiGetByLegalEntityAndLocationRequest, options?: AxiosRequestConfig): AxiosPromise<LegalEntityWorkLocation> {
            return localVarFp.getByLegalEntityAndLocation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Data Access: View Legal Entity Work Locations
         * @summary Get a list of Work Locations for a Legal Entity
         * @param {LegalEntityWorkLocationsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: LegalEntityWorkLocationsApiListRequest, options?: AxiosRequestConfig): AxiosPromise<PagedResultOfLegalEntityWorkLocation> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Data Access: Update Legal Entity Work Location
         * @summary Update Work Location By Legal Entity ID
         * @param {LegalEntityWorkLocationsApiUpdateByLegalEntityIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByLegalEntityId(requestParameters: LegalEntityWorkLocationsApiUpdateByLegalEntityIdRequest, options?: AxiosRequestConfig): AxiosPromise<CreateOrUpdateResponse> {
            return localVarFp.updateByLegalEntityId(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addByLegalEntityId operation in LegalEntityWorkLocationsApi.
 * @export
 * @interface LegalEntityWorkLocationsApiAddByLegalEntityIdRequest
 */
export type LegalEntityWorkLocationsApiAddByLegalEntityIdRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof LegalEntityWorkLocationsApiAddByLegalEntityId
    */
    readonly legalEntityId: number
    
    /**
    * Use Physical Address as mailing address?
    * @type {boolean}
    * @memberof LegalEntityWorkLocationsApiAddByLegalEntityId
    */
    readonly addressData?: boolean
    
} & WorkLocation

/**
 * Request parameters for deleteByLegalEntityAndWorkLocationId operation in LegalEntityWorkLocationsApi.
 * @export
 * @interface LegalEntityWorkLocationsApiDeleteByLegalEntityAndWorkLocationIdRequest
 */
export type LegalEntityWorkLocationsApiDeleteByLegalEntityAndWorkLocationIdRequest = {
    
    /**
    * ID of the Legal Entity for which you want to delete Work Location
    * @type {number}
    * @memberof LegalEntityWorkLocationsApiDeleteByLegalEntityAndWorkLocationId
    */
    readonly legalEntityId: number
    
    /**
    * ID of the Work Location
    * @type {string}
    * @memberof LegalEntityWorkLocationsApiDeleteByLegalEntityAndWorkLocationId
    */
    readonly workLocationId: string
    
}

/**
 * Request parameters for getByLegalEntityAndLocation operation in LegalEntityWorkLocationsApi.
 * @export
 * @interface LegalEntityWorkLocationsApiGetByLegalEntityAndLocationRequest
 */
export type LegalEntityWorkLocationsApiGetByLegalEntityAndLocationRequest = {
    
    /**
    * ID of the Legal Entity for which you want to get the work location
    * @type {number}
    * @memberof LegalEntityWorkLocationsApiGetByLegalEntityAndLocation
    */
    readonly legalEntityId: number
    
    /**
    * ID of the Work Location
    * @type {string}
    * @memberof LegalEntityWorkLocationsApiGetByLegalEntityAndLocation
    */
    readonly workLocationId: string
    
}

/**
 * Request parameters for list operation in LegalEntityWorkLocationsApi.
 * @export
 * @interface LegalEntityWorkLocationsApiListRequest
 */
export type LegalEntityWorkLocationsApiListRequest = {
    
    /**
    * ID of the Legal Entity for which you want to get the work locations
    * @type {number}
    * @memberof LegalEntityWorkLocationsApiList
    */
    readonly legalEntityId: number
    
    /**
    * Token to get the next set of work locations
    * @type {string}
    * @memberof LegalEntityWorkLocationsApiList
    */
    readonly continuationToken?: string
    
}

/**
 * Request parameters for updateByLegalEntityId operation in LegalEntityWorkLocationsApi.
 * @export
 * @interface LegalEntityWorkLocationsApiUpdateByLegalEntityIdRequest
 */
export type LegalEntityWorkLocationsApiUpdateByLegalEntityIdRequest = {
    
    /**
    * ID of the Legal Entity for which you want to get the work locations
    * @type {number}
    * @memberof LegalEntityWorkLocationsApiUpdateByLegalEntityId
    */
    readonly legalEntityId: number
    
} & WorkLocation2

/**
 * LegalEntityWorkLocationsApiGenerated - object-oriented interface
 * @export
 * @class LegalEntityWorkLocationsApiGenerated
 * @extends {BaseAPI}
 */
export class LegalEntityWorkLocationsApiGenerated extends BaseAPI {
    /**
     * Data Access: Create Legal Entity Work Location
     * @summary Add Work Location By Legal Entity ID
     * @param {LegalEntityWorkLocationsApiAddByLegalEntityIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalEntityWorkLocationsApiGenerated
     */
    public addByLegalEntityId(requestParameters: LegalEntityWorkLocationsApiAddByLegalEntityIdRequest, options?: AxiosRequestConfig) {
        return LegalEntityWorkLocationsApiFp(this.configuration).addByLegalEntityId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Data Access: Delete Legal Entity Work Location
     * @summary Delete Work Location By Work Location ID And Legal Entity ID
     * @param {LegalEntityWorkLocationsApiDeleteByLegalEntityAndWorkLocationIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalEntityWorkLocationsApiGenerated
     */
    public deleteByLegalEntityAndWorkLocationId(requestParameters: LegalEntityWorkLocationsApiDeleteByLegalEntityAndWorkLocationIdRequest, options?: AxiosRequestConfig) {
        return LegalEntityWorkLocationsApiFp(this.configuration).deleteByLegalEntityAndWorkLocationId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Data Access: View Legal Entity Work Location
     * @summary Get a Work Location for a Legal Entity By Legal Entity ID and Work Location ID
     * @param {LegalEntityWorkLocationsApiGetByLegalEntityAndLocationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalEntityWorkLocationsApiGenerated
     */
    public getByLegalEntityAndLocation(requestParameters: LegalEntityWorkLocationsApiGetByLegalEntityAndLocationRequest, options?: AxiosRequestConfig) {
        return LegalEntityWorkLocationsApiFp(this.configuration).getByLegalEntityAndLocation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Data Access: View Legal Entity Work Locations
     * @summary Get a list of Work Locations for a Legal Entity
     * @param {LegalEntityWorkLocationsApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalEntityWorkLocationsApiGenerated
     */
    public list(requestParameters: LegalEntityWorkLocationsApiListRequest, options?: AxiosRequestConfig) {
        return LegalEntityWorkLocationsApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Data Access: Update Legal Entity Work Location
     * @summary Update Work Location By Legal Entity ID
     * @param {LegalEntityWorkLocationsApiUpdateByLegalEntityIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalEntityWorkLocationsApiGenerated
     */
    public updateByLegalEntityId(requestParameters: LegalEntityWorkLocationsApiUpdateByLegalEntityIdRequest, options?: AxiosRequestConfig) {
        return LegalEntityWorkLocationsApiFp(this.configuration).updateByLegalEntityId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
