/* tslint:disable */
/* eslint-disable */
/*
Paycor Public API


Welcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section. 

# Getting Started

<strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>

# GET, PUT, POST

* When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc]. 
* When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system.
* When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'


# Error Handling

* 400: Please consult the response text to correct your request information. 
* 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key. 
* 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header.
* 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen. 
* 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state. 
* 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.
  * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs). 
* 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.


# IDs

* ClientId = LegalEntityId
* TenantId = CompanyId
* EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API

# Earnings, Deductions, Taxes

This section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints. 

Paycor stores Earnings, Deductions, and Taxes each at three levels:
* Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):
  * Earnings: REG, OT
  * Taxes: FITWH, SOC, SOCER, OHCIN
  * Deductions: 401k, KMat, H125, UWay
* Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code. 
  * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints. 
* Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code
  * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden. 

# Authentication

<!-- ReDoc-Inject: <security-definitions> -->

The version of the OpenAPI document: 


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { EmployeeTimeOffRequest } from '../models';
// @ts-ignore
import { PagedResultOfEmployeeTimeOffRequest } from '../models';
// @ts-ignore
import { PaycorError } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TimeOffRequestsApi - axios parameter creator
 * @export
 */
export const TimeOffRequestsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Data Access: View Timeoff Requests by Timeoff Request Id
         * @summary Get Employee Timeoff Request by Legal Entity Id And Timeoff Request Id
         * @param {number} legalEntityId ID of the Legal Entity for which you want to get the Timeoff Request.
         * @param {string} timeoffRequestId ID of the Employee Timeoff Request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeoffRequestById: async (legalEntityId: number, timeoffRequestId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'legalEntityId' is not null or undefined
            assertParamExists('getTimeoffRequestById', 'legalEntityId', legalEntityId)
            // verify required parameter 'timeoffRequestId' is not null or undefined
            assertParamExists('getTimeoffRequestById', 'timeoffRequestId', timeoffRequestId)
            const localVarPath = `/v1/legalentities/{legalEntityId}/timeoffRequests/{timeoffRequestId}`
                .replace(`{${"legalEntityId"}}`, encodeURIComponent(String(legalEntityId !== undefined ? legalEntityId : `-legalEntityId-`)))
                .replace(`{${"timeoffRequestId"}}`, encodeURIComponent(String(timeoffRequestId !== undefined ? timeoffRequestId : `-timeoffRequestId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Access-Token required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "accessToken", configuration })
            // authentication Apim-Subscription-Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Ocp-Apim-Subscription-Key", keyParamName: "apimSubscriptionKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/legalentities/{legalEntityId}/timeoffRequests/{timeoffRequestId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Date requirements: * Start Date and End Date must not be more than one year ago * Start date and end date range can be no greater than 90 days  Data Access: View Timeoff Requests by Employee Id
         * @summary Get Employee Time Off Requests by EmployeeId
         * @param {string} employeeId ID of the Employee for which you want to get the Time Off Requests.
         * @param {string} startDate Date range filter, showing which records to return.
         * @param {string} endDate Date range filter, showing which records to return.
         * @param {string} [continuationToken] Token to get the next set of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByEmployeeId: async (employeeId: string, startDate: string, endDate: string, continuationToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('listByEmployeeId', 'employeeId', employeeId)
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('listByEmployeeId', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('listByEmployeeId', 'endDate', endDate)
            const localVarPath = `/v1/employees/{employeeId}/timeoffrequests`
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Access-Token required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "accessToken", configuration })
            // authentication Apim-Subscription-Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Ocp-Apim-Subscription-Key", keyParamName: "apimSubscriptionKey", configuration })
            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (continuationToken !== undefined) {
                localVarQueryParameter['continuationToken'] = continuationToken;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employeeId}/timeoffrequests',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Date requirements: * Start Date and End Date must not be more than one year ago * Start date and end date range can be no greater than 90 days  Data Access: View Timeoff Requests by Legal Entity Id
         * @summary Get Employee Time Off Requests by Legal Entity Id
         * @param {number} legalEntityId ID of the Legal Entity for which you want to get the Time Off Requests.
         * @param {string} startDate Date range filter, showing which records to return.
         * @param {string} endDate Date range filter, showing which records to return.
         * @param {string} [continuationToken] Token to get the next set of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByLegalEntityId: async (legalEntityId: number, startDate: string, endDate: string, continuationToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'legalEntityId' is not null or undefined
            assertParamExists('listByLegalEntityId', 'legalEntityId', legalEntityId)
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('listByLegalEntityId', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('listByLegalEntityId', 'endDate', endDate)
            const localVarPath = `/v1/legalentities/{legalEntityId}/timeoffrequests`
                .replace(`{${"legalEntityId"}}`, encodeURIComponent(String(legalEntityId !== undefined ? legalEntityId : `-legalEntityId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Access-Token required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "accessToken", configuration })
            // authentication Apim-Subscription-Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Ocp-Apim-Subscription-Key", keyParamName: "apimSubscriptionKey", configuration })
            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (continuationToken !== undefined) {
                localVarQueryParameter['continuationToken'] = continuationToken;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/legalentities/{legalEntityId}/timeoffrequests',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TimeOffRequestsApi - functional programming interface
 * @export
 */
export const TimeOffRequestsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TimeOffRequestsApiAxiosParamCreator(configuration)
    return {
        /**
         * Data Access: View Timeoff Requests by Timeoff Request Id
         * @summary Get Employee Timeoff Request by Legal Entity Id And Timeoff Request Id
         * @param {TimeOffRequestsApiGetTimeoffRequestByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTimeoffRequestById(requestParameters: TimeOffRequestsApiGetTimeoffRequestByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeTimeOffRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTimeoffRequestById(requestParameters.legalEntityId, requestParameters.timeoffRequestId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Date requirements: * Start Date and End Date must not be more than one year ago * Start date and end date range can be no greater than 90 days  Data Access: View Timeoff Requests by Employee Id
         * @summary Get Employee Time Off Requests by EmployeeId
         * @param {TimeOffRequestsApiListByEmployeeIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listByEmployeeId(requestParameters: TimeOffRequestsApiListByEmployeeIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedResultOfEmployeeTimeOffRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listByEmployeeId(requestParameters.employeeId, requestParameters.startDate, requestParameters.endDate, requestParameters.continuationToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Date requirements: * Start Date and End Date must not be more than one year ago * Start date and end date range can be no greater than 90 days  Data Access: View Timeoff Requests by Legal Entity Id
         * @summary Get Employee Time Off Requests by Legal Entity Id
         * @param {TimeOffRequestsApiListByLegalEntityIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listByLegalEntityId(requestParameters: TimeOffRequestsApiListByLegalEntityIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedResultOfEmployeeTimeOffRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listByLegalEntityId(requestParameters.legalEntityId, requestParameters.startDate, requestParameters.endDate, requestParameters.continuationToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TimeOffRequestsApi - factory interface
 * @export
 */
export const TimeOffRequestsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TimeOffRequestsApiFp(configuration)
    return {
        /**
         * Data Access: View Timeoff Requests by Timeoff Request Id
         * @summary Get Employee Timeoff Request by Legal Entity Id And Timeoff Request Id
         * @param {TimeOffRequestsApiGetTimeoffRequestByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeoffRequestById(requestParameters: TimeOffRequestsApiGetTimeoffRequestByIdRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeeTimeOffRequest> {
            return localVarFp.getTimeoffRequestById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Date requirements: * Start Date and End Date must not be more than one year ago * Start date and end date range can be no greater than 90 days  Data Access: View Timeoff Requests by Employee Id
         * @summary Get Employee Time Off Requests by EmployeeId
         * @param {TimeOffRequestsApiListByEmployeeIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByEmployeeId(requestParameters: TimeOffRequestsApiListByEmployeeIdRequest, options?: AxiosRequestConfig): AxiosPromise<PagedResultOfEmployeeTimeOffRequest> {
            return localVarFp.listByEmployeeId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Date requirements: * Start Date and End Date must not be more than one year ago * Start date and end date range can be no greater than 90 days  Data Access: View Timeoff Requests by Legal Entity Id
         * @summary Get Employee Time Off Requests by Legal Entity Id
         * @param {TimeOffRequestsApiListByLegalEntityIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByLegalEntityId(requestParameters: TimeOffRequestsApiListByLegalEntityIdRequest, options?: AxiosRequestConfig): AxiosPromise<PagedResultOfEmployeeTimeOffRequest> {
            return localVarFp.listByLegalEntityId(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getTimeoffRequestById operation in TimeOffRequestsApi.
 * @export
 * @interface TimeOffRequestsApiGetTimeoffRequestByIdRequest
 */
export type TimeOffRequestsApiGetTimeoffRequestByIdRequest = {
    
    /**
    * ID of the Legal Entity for which you want to get the Timeoff Request.
    * @type {number}
    * @memberof TimeOffRequestsApiGetTimeoffRequestById
    */
    readonly legalEntityId: number
    
    /**
    * ID of the Employee Timeoff Request.
    * @type {string}
    * @memberof TimeOffRequestsApiGetTimeoffRequestById
    */
    readonly timeoffRequestId: string
    
}

/**
 * Request parameters for listByEmployeeId operation in TimeOffRequestsApi.
 * @export
 * @interface TimeOffRequestsApiListByEmployeeIdRequest
 */
export type TimeOffRequestsApiListByEmployeeIdRequest = {
    
    /**
    * ID of the Employee for which you want to get the Time Off Requests.
    * @type {string}
    * @memberof TimeOffRequestsApiListByEmployeeId
    */
    readonly employeeId: string
    
    /**
    * Date range filter, showing which records to return.
    * @type {string}
    * @memberof TimeOffRequestsApiListByEmployeeId
    */
    readonly startDate: string
    
    /**
    * Date range filter, showing which records to return.
    * @type {string}
    * @memberof TimeOffRequestsApiListByEmployeeId
    */
    readonly endDate: string
    
    /**
    * Token to get the next set of results.
    * @type {string}
    * @memberof TimeOffRequestsApiListByEmployeeId
    */
    readonly continuationToken?: string
    
}

/**
 * Request parameters for listByLegalEntityId operation in TimeOffRequestsApi.
 * @export
 * @interface TimeOffRequestsApiListByLegalEntityIdRequest
 */
export type TimeOffRequestsApiListByLegalEntityIdRequest = {
    
    /**
    * ID of the Legal Entity for which you want to get the Time Off Requests.
    * @type {number}
    * @memberof TimeOffRequestsApiListByLegalEntityId
    */
    readonly legalEntityId: number
    
    /**
    * Date range filter, showing which records to return.
    * @type {string}
    * @memberof TimeOffRequestsApiListByLegalEntityId
    */
    readonly startDate: string
    
    /**
    * Date range filter, showing which records to return.
    * @type {string}
    * @memberof TimeOffRequestsApiListByLegalEntityId
    */
    readonly endDate: string
    
    /**
    * Token to get the next set of results.
    * @type {string}
    * @memberof TimeOffRequestsApiListByLegalEntityId
    */
    readonly continuationToken?: string
    
}

/**
 * TimeOffRequestsApiGenerated - object-oriented interface
 * @export
 * @class TimeOffRequestsApiGenerated
 * @extends {BaseAPI}
 */
export class TimeOffRequestsApiGenerated extends BaseAPI {
    /**
     * Data Access: View Timeoff Requests by Timeoff Request Id
     * @summary Get Employee Timeoff Request by Legal Entity Id And Timeoff Request Id
     * @param {TimeOffRequestsApiGetTimeoffRequestByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeOffRequestsApiGenerated
     */
    public getTimeoffRequestById(requestParameters: TimeOffRequestsApiGetTimeoffRequestByIdRequest, options?: AxiosRequestConfig) {
        return TimeOffRequestsApiFp(this.configuration).getTimeoffRequestById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Date requirements: * Start Date and End Date must not be more than one year ago * Start date and end date range can be no greater than 90 days  Data Access: View Timeoff Requests by Employee Id
     * @summary Get Employee Time Off Requests by EmployeeId
     * @param {TimeOffRequestsApiListByEmployeeIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeOffRequestsApiGenerated
     */
    public listByEmployeeId(requestParameters: TimeOffRequestsApiListByEmployeeIdRequest, options?: AxiosRequestConfig) {
        return TimeOffRequestsApiFp(this.configuration).listByEmployeeId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Date requirements: * Start Date and End Date must not be more than one year ago * Start date and end date range can be no greater than 90 days  Data Access: View Timeoff Requests by Legal Entity Id
     * @summary Get Employee Time Off Requests by Legal Entity Id
     * @param {TimeOffRequestsApiListByLegalEntityIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeOffRequestsApiGenerated
     */
    public listByLegalEntityId(requestParameters: TimeOffRequestsApiListByLegalEntityIdRequest, options?: AxiosRequestConfig) {
        return TimeOffRequestsApiFp(this.configuration).listByLegalEntityId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
