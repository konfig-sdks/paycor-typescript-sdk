/* tslint:disable */
/* eslint-disable */
/*
Paycor Public API


Welcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section. 

# Getting Started

<strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>

# GET, PUT, POST

* When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc]. 
* When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system.
* When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'


# Error Handling

* 400: Please consult the response text to correct your request information. 
* 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key. 
* 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header.
* 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen. 
* 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state. 
* 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.
  * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs). 
* 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.


# IDs

* ClientId = LegalEntityId
* TenantId = CompanyId
* EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API

# Earnings, Deductions, Taxes

This section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints. 

Paycor stores Earnings, Deductions, and Taxes each at three levels:
* Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):
  * Earnings: REG, OT
  * Taxes: FITWH, SOC, SOCER, OHCIN
  * Deductions: 401k, KMat, H125, UWay
* Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code. 
  * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints. 
* Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code
  * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden. 

# Authentication

<!-- ReDoc-Inject: <security-definitions> -->

The version of the OpenAPI document: 


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateOrUpdateResponse } from '../models';
// @ts-ignore
import { EmployeeSchedule } from '../models';
// @ts-ignore
import { PagedResultOfEmployeeSchedule } from '../models';
// @ts-ignore
import { PaycorError } from '../models';
// @ts-ignore
import { Schedule2 } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EmployeeLegacyPerformTimeSchedulesApi - axios parameter creator
 * @export
 */
export const EmployeeLegacyPerformTimeSchedulesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Data Access: Create Legacy/Perform Time Employee Schedule
         * @summary Add Schedule to Employee
         * @param {string} employeeId ID of an Employee for whom you want to add a schedule
         * @param {Schedule2} schedule2 Employee Schedule object to insert
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToEmployee: async (employeeId: string, schedule2: Schedule2, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('addToEmployee', 'employeeId', employeeId)
            // verify required parameter 'schedule2' is not null or undefined
            assertParamExists('addToEmployee', 'schedule2', schedule2)
            const localVarPath = `/v1/employees/{employeeId}/schedules`
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Access-Token required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "accessToken", configuration })
            // authentication Apim-Subscription-Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Ocp-Apim-Subscription-Key", keyParamName: "apimSubscriptionKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: schedule2,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employeeId}/schedules',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(schedule2, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Data Access: Delete Legacy/Perform Time Employee Schedule
         * @summary Delete Employee Schedule
         * @param {string} employeeId Employee ID of the schedule record you want to delete
         * @param {string} scheduleId Schedule ID to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLegacySchedule: async (employeeId: string, scheduleId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('deleteLegacySchedule', 'employeeId', employeeId)
            // verify required parameter 'scheduleId' is not null or undefined
            assertParamExists('deleteLegacySchedule', 'scheduleId', scheduleId)
            const localVarPath = `/v1/employees/{employeeId}/schedules/{scheduleId}`
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)))
                .replace(`{${"scheduleId"}}`, encodeURIComponent(String(scheduleId !== undefined ? scheduleId : `-scheduleId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Access-Token required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "accessToken", configuration })
            // authentication Apim-Subscription-Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Ocp-Apim-Subscription-Key", keyParamName: "apimSubscriptionKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employeeId}/schedules/{scheduleId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Date requirements: * Start Date and End Date must not be more than one year ago * Start Date must not be in future * Start date and end date range can be no greater than 90 days  Data Access: View Legacy/Perform Employee Schedules by Employee Id
         * @summary Get Employee Schedules by EmployeeID
         * @param {string} employeeId ID of employee for which you want to get schedules
         * @param {string} [startDate] Date range filter, showing which records to return
         * @param {string} [endDate] Date range filter, showing which records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByEmployeeId: async (employeeId: string, startDate?: string, endDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getByEmployeeId', 'employeeId', employeeId)
            const localVarPath = `/v1/employees/{employeeId}/schedules`
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Access-Token required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "accessToken", configuration })
            // authentication Apim-Subscription-Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Ocp-Apim-Subscription-Key", keyParamName: "apimSubscriptionKey", configuration })
            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employeeId}/schedules',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Date requirements: * Start Date and End Date must not be more than one year ago * Start Date must not be in future * Start date and end date range can be no greater than 90 days  Data Access: View Legacy/Perform Employee Schedules by Legal Entity Id
         * @summary Get Employee Schedules by Legal Entity ID
         * @param {number} legalEntityId ID of Legal Entity for which you want to get schedules
         * @param {string} [startDate] Date range filter, showing which records to return
         * @param {string} [endDate] Date range filter, showing which records to return
         * @param {string} [continuationToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByLegalEntityId: async (legalEntityId: number, startDate?: string, endDate?: string, continuationToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'legalEntityId' is not null or undefined
            assertParamExists('getByLegalEntityId', 'legalEntityId', legalEntityId)
            const localVarPath = `/v1/legalEntities/{legalEntityId}/schedules`
                .replace(`{${"legalEntityId"}}`, encodeURIComponent(String(legalEntityId !== undefined ? legalEntityId : `-legalEntityId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Access-Token required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "accessToken", configuration })
            // authentication Apim-Subscription-Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Ocp-Apim-Subscription-Key", keyParamName: "apimSubscriptionKey", configuration })
            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (continuationToken !== undefined) {
                localVarQueryParameter['continuationToken'] = continuationToken;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/legalEntities/{legalEntityId}/schedules',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployeeLegacyPerformTimeSchedulesApi - functional programming interface
 * @export
 */
export const EmployeeLegacyPerformTimeSchedulesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmployeeLegacyPerformTimeSchedulesApiAxiosParamCreator(configuration)
    return {
        /**
         * Data Access: Create Legacy/Perform Time Employee Schedule
         * @summary Add Schedule to Employee
         * @param {EmployeeLegacyPerformTimeSchedulesApiAddToEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addToEmployee(requestParameters: EmployeeLegacyPerformTimeSchedulesApiAddToEmployeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOrUpdateResponse>> {
            const schedule2: Schedule2 = {
                StartDateTime: requestParameters.StartDateTime,
                EndDateTime: requestParameters.EndDateTime,
                BeforeStartTimeInMinutes: requestParameters.BeforeStartTimeInMinutes,
                AfterEndTimeInMinutes: requestParameters.AfterEndTimeInMinutes,
                Label: requestParameters.Label,
                ShiftDepeartmentId: requestParameters.ShiftDepeartmentId
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addToEmployee(requestParameters.employeeId, schedule2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Data Access: Delete Legacy/Perform Time Employee Schedule
         * @summary Delete Employee Schedule
         * @param {EmployeeLegacyPerformTimeSchedulesApiDeleteLegacyScheduleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLegacySchedule(requestParameters: EmployeeLegacyPerformTimeSchedulesApiDeleteLegacyScheduleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLegacySchedule(requestParameters.employeeId, requestParameters.scheduleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Date requirements: * Start Date and End Date must not be more than one year ago * Start Date must not be in future * Start date and end date range can be no greater than 90 days  Data Access: View Legacy/Perform Employee Schedules by Employee Id
         * @summary Get Employee Schedules by EmployeeID
         * @param {EmployeeLegacyPerformTimeSchedulesApiGetByEmployeeIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByEmployeeId(requestParameters: EmployeeLegacyPerformTimeSchedulesApiGetByEmployeeIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmployeeSchedule>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByEmployeeId(requestParameters.employeeId, requestParameters.startDate, requestParameters.endDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Date requirements: * Start Date and End Date must not be more than one year ago * Start Date must not be in future * Start date and end date range can be no greater than 90 days  Data Access: View Legacy/Perform Employee Schedules by Legal Entity Id
         * @summary Get Employee Schedules by Legal Entity ID
         * @param {EmployeeLegacyPerformTimeSchedulesApiGetByLegalEntityIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByLegalEntityId(requestParameters: EmployeeLegacyPerformTimeSchedulesApiGetByLegalEntityIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedResultOfEmployeeSchedule>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByLegalEntityId(requestParameters.legalEntityId, requestParameters.startDate, requestParameters.endDate, requestParameters.continuationToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmployeeLegacyPerformTimeSchedulesApi - factory interface
 * @export
 */
export const EmployeeLegacyPerformTimeSchedulesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmployeeLegacyPerformTimeSchedulesApiFp(configuration)
    return {
        /**
         * Data Access: Create Legacy/Perform Time Employee Schedule
         * @summary Add Schedule to Employee
         * @param {EmployeeLegacyPerformTimeSchedulesApiAddToEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToEmployee(requestParameters: EmployeeLegacyPerformTimeSchedulesApiAddToEmployeeRequest, options?: AxiosRequestConfig): AxiosPromise<CreateOrUpdateResponse> {
            return localVarFp.addToEmployee(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Data Access: Delete Legacy/Perform Time Employee Schedule
         * @summary Delete Employee Schedule
         * @param {EmployeeLegacyPerformTimeSchedulesApiDeleteLegacyScheduleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLegacySchedule(requestParameters: EmployeeLegacyPerformTimeSchedulesApiDeleteLegacyScheduleRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteLegacySchedule(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Date requirements: * Start Date and End Date must not be more than one year ago * Start Date must not be in future * Start date and end date range can be no greater than 90 days  Data Access: View Legacy/Perform Employee Schedules by Employee Id
         * @summary Get Employee Schedules by EmployeeID
         * @param {EmployeeLegacyPerformTimeSchedulesApiGetByEmployeeIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByEmployeeId(requestParameters: EmployeeLegacyPerformTimeSchedulesApiGetByEmployeeIdRequest, options?: AxiosRequestConfig): AxiosPromise<Array<EmployeeSchedule>> {
            return localVarFp.getByEmployeeId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Date requirements: * Start Date and End Date must not be more than one year ago * Start Date must not be in future * Start date and end date range can be no greater than 90 days  Data Access: View Legacy/Perform Employee Schedules by Legal Entity Id
         * @summary Get Employee Schedules by Legal Entity ID
         * @param {EmployeeLegacyPerformTimeSchedulesApiGetByLegalEntityIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByLegalEntityId(requestParameters: EmployeeLegacyPerformTimeSchedulesApiGetByLegalEntityIdRequest, options?: AxiosRequestConfig): AxiosPromise<PagedResultOfEmployeeSchedule> {
            return localVarFp.getByLegalEntityId(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addToEmployee operation in EmployeeLegacyPerformTimeSchedulesApi.
 * @export
 * @interface EmployeeLegacyPerformTimeSchedulesApiAddToEmployeeRequest
 */
export type EmployeeLegacyPerformTimeSchedulesApiAddToEmployeeRequest = {
    
    /**
    * ID of an Employee for whom you want to add a schedule
    * @type {string}
    * @memberof EmployeeLegacyPerformTimeSchedulesApiAddToEmployee
    */
    readonly employeeId: string
    
} & Schedule2

/**
 * Request parameters for deleteLegacySchedule operation in EmployeeLegacyPerformTimeSchedulesApi.
 * @export
 * @interface EmployeeLegacyPerformTimeSchedulesApiDeleteLegacyScheduleRequest
 */
export type EmployeeLegacyPerformTimeSchedulesApiDeleteLegacyScheduleRequest = {
    
    /**
    * Employee ID of the schedule record you want to delete
    * @type {string}
    * @memberof EmployeeLegacyPerformTimeSchedulesApiDeleteLegacySchedule
    */
    readonly employeeId: string
    
    /**
    * Schedule ID to delete
    * @type {string}
    * @memberof EmployeeLegacyPerformTimeSchedulesApiDeleteLegacySchedule
    */
    readonly scheduleId: string
    
}

/**
 * Request parameters for getByEmployeeId operation in EmployeeLegacyPerformTimeSchedulesApi.
 * @export
 * @interface EmployeeLegacyPerformTimeSchedulesApiGetByEmployeeIdRequest
 */
export type EmployeeLegacyPerformTimeSchedulesApiGetByEmployeeIdRequest = {
    
    /**
    * ID of employee for which you want to get schedules
    * @type {string}
    * @memberof EmployeeLegacyPerformTimeSchedulesApiGetByEmployeeId
    */
    readonly employeeId: string
    
    /**
    * Date range filter, showing which records to return
    * @type {string}
    * @memberof EmployeeLegacyPerformTimeSchedulesApiGetByEmployeeId
    */
    readonly startDate?: string
    
    /**
    * Date range filter, showing which records to return
    * @type {string}
    * @memberof EmployeeLegacyPerformTimeSchedulesApiGetByEmployeeId
    */
    readonly endDate?: string
    
}

/**
 * Request parameters for getByLegalEntityId operation in EmployeeLegacyPerformTimeSchedulesApi.
 * @export
 * @interface EmployeeLegacyPerformTimeSchedulesApiGetByLegalEntityIdRequest
 */
export type EmployeeLegacyPerformTimeSchedulesApiGetByLegalEntityIdRequest = {
    
    /**
    * ID of Legal Entity for which you want to get schedules
    * @type {number}
    * @memberof EmployeeLegacyPerformTimeSchedulesApiGetByLegalEntityId
    */
    readonly legalEntityId: number
    
    /**
    * Date range filter, showing which records to return
    * @type {string}
    * @memberof EmployeeLegacyPerformTimeSchedulesApiGetByLegalEntityId
    */
    readonly startDate?: string
    
    /**
    * Date range filter, showing which records to return
    * @type {string}
    * @memberof EmployeeLegacyPerformTimeSchedulesApiGetByLegalEntityId
    */
    readonly endDate?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmployeeLegacyPerformTimeSchedulesApiGetByLegalEntityId
    */
    readonly continuationToken?: string
    
}

/**
 * EmployeeLegacyPerformTimeSchedulesApiGenerated - object-oriented interface
 * @export
 * @class EmployeeLegacyPerformTimeSchedulesApiGenerated
 * @extends {BaseAPI}
 */
export class EmployeeLegacyPerformTimeSchedulesApiGenerated extends BaseAPI {
    /**
     * Data Access: Create Legacy/Perform Time Employee Schedule
     * @summary Add Schedule to Employee
     * @param {EmployeeLegacyPerformTimeSchedulesApiAddToEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeLegacyPerformTimeSchedulesApiGenerated
     */
    public addToEmployee(requestParameters: EmployeeLegacyPerformTimeSchedulesApiAddToEmployeeRequest, options?: AxiosRequestConfig) {
        return EmployeeLegacyPerformTimeSchedulesApiFp(this.configuration).addToEmployee(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Data Access: Delete Legacy/Perform Time Employee Schedule
     * @summary Delete Employee Schedule
     * @param {EmployeeLegacyPerformTimeSchedulesApiDeleteLegacyScheduleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeLegacyPerformTimeSchedulesApiGenerated
     */
    public deleteLegacySchedule(requestParameters: EmployeeLegacyPerformTimeSchedulesApiDeleteLegacyScheduleRequest, options?: AxiosRequestConfig) {
        return EmployeeLegacyPerformTimeSchedulesApiFp(this.configuration).deleteLegacySchedule(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Date requirements: * Start Date and End Date must not be more than one year ago * Start Date must not be in future * Start date and end date range can be no greater than 90 days  Data Access: View Legacy/Perform Employee Schedules by Employee Id
     * @summary Get Employee Schedules by EmployeeID
     * @param {EmployeeLegacyPerformTimeSchedulesApiGetByEmployeeIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeLegacyPerformTimeSchedulesApiGenerated
     */
    public getByEmployeeId(requestParameters: EmployeeLegacyPerformTimeSchedulesApiGetByEmployeeIdRequest, options?: AxiosRequestConfig) {
        return EmployeeLegacyPerformTimeSchedulesApiFp(this.configuration).getByEmployeeId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Date requirements: * Start Date and End Date must not be more than one year ago * Start Date must not be in future * Start date and end date range can be no greater than 90 days  Data Access: View Legacy/Perform Employee Schedules by Legal Entity Id
     * @summary Get Employee Schedules by Legal Entity ID
     * @param {EmployeeLegacyPerformTimeSchedulesApiGetByLegalEntityIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeLegacyPerformTimeSchedulesApiGenerated
     */
    public getByLegalEntityId(requestParameters: EmployeeLegacyPerformTimeSchedulesApiGetByLegalEntityIdRequest, options?: AxiosRequestConfig) {
        return EmployeeLegacyPerformTimeSchedulesApiFp(this.configuration).getByLegalEntityId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
