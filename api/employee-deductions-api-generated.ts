/* tslint:disable */
/* eslint-disable */
/*
Paycor Public API


Welcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section. 

# Getting Started

<strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>

# GET, PUT, POST

* When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc]. 
* When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system.
* When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'


# Error Handling

* 400: Please consult the response text to correct your request information. 
* 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key. 
* 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header.
* 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen. 
* 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state. 
* 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.
  * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs). 
* 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.


# IDs

* ClientId = LegalEntityId
* TenantId = CompanyId
* EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API

# Earnings, Deductions, Taxes

This section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints. 

Paycor stores Earnings, Deductions, and Taxes each at three levels:
* Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):
  * Earnings: REG, OT
  * Taxes: FITWH, SOC, SOCER, OHCIN
  * Deductions: 401k, KMat, H125, UWay
* Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code. 
  * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints. 
* Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code
  * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden. 

# Authentication

<!-- ReDoc-Inject: <security-definitions> -->

The version of the OpenAPI document: 


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateOrUpdateResponse } from '../models';
// @ts-ignore
import { EmployeeDeduction } from '../models';
// @ts-ignore
import { EmployeeDeduction2 } from '../models';
// @ts-ignore
import { EmployeeDeduction3 } from '../models';
// @ts-ignore
import { EmployeeDeductionAmount2 } from '../models';
// @ts-ignore
import { EmployeeDeductionAmount3 } from '../models';
// @ts-ignore
import { IncludeInPay } from '../models';
// @ts-ignore
import { Includes3 } from '../models';
// @ts-ignore
import { Includes4 } from '../models';
// @ts-ignore
import { PagedResultOfEmployeeDeduction } from '../models';
// @ts-ignore
import { PayFrequency } from '../models';
// @ts-ignore
import { PaycorError } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EmployeeDeductionsApi - axios parameter creator
 * @export
 */
export const EmployeeDeductionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Tip: first call \"Get Legal Entity Deductions by Legal Entity ID\" to get the valid Deduction Codes  Data Access: Add Employee Deduction
         * @summary Add Deduction to Employee
         * @param {string} employeeId ID of an Employee for whom you want to add the deduction
         * @param {EmployeeDeduction2} employeeDeduction2 EmployeeDeduction object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDeductionToEmployee: async (employeeId: string, employeeDeduction2: EmployeeDeduction2, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('addDeductionToEmployee', 'employeeId', employeeId)
            // verify required parameter 'employeeDeduction2' is not null or undefined
            assertParamExists('addDeductionToEmployee', 'employeeDeduction2', employeeDeduction2)
            const localVarPath = `/v1/employees/{employeeId}/deductions`
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Access-Token required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "accessToken", configuration })
            // authentication Apim-Subscription-Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Ocp-Apim-Subscription-Key", keyParamName: "apimSubscriptionKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeeDeduction2,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employeeId}/deductions',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeeDeduction2, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Data Access: View Employee Deductions Information
         * @summary Get Employee Deductions by EmployeeID
         * @param {string} employeeId ID of the employee for whom you want to get the deductions
         * @param {Array<Includes4>} [include] Options to include more data: All, AmountData  Data Access required  AmountData &#x3D; View Employee Deductions Amounts
         * @param {string} [continuationToken] Token to get the next set of employee earnings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByEmployeeId: async (employeeId: string, include?: Array<Includes4>, continuationToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getByEmployeeId', 'employeeId', employeeId)
            const localVarPath = `/v1/employees/{employeeId}/deductions`
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Access-Token required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "accessToken", configuration })
            // authentication Apim-Subscription-Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Ocp-Apim-Subscription-Key", keyParamName: "apimSubscriptionKey", configuration })
            if (include) {
                localVarQueryParameter['include'] = include;
            }

            if (continuationToken !== undefined) {
                localVarQueryParameter['continuationToken'] = continuationToken;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employeeId}/deductions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Data Access: View Employee Deduction Information
         * @summary Get Employee Deduction by EmployeeID and EmployeeDeductionID
         * @param {string} employeeId ID of an Employee for whom you want to get the deduction.
         * @param {string} employeeDeductionId ID of the Employee Deduction you want to get.
         * @param {Array<Includes3>} [include] Options to include more data: All, AmountData  Data Access required  AmountData &#x3D; View Employee Deduction Amounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByEmployeeIdAndDeductionId: async (employeeId: string, employeeDeductionId: string, include?: Array<Includes3>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getByEmployeeIdAndDeductionId', 'employeeId', employeeId)
            // verify required parameter 'employeeDeductionId' is not null or undefined
            assertParamExists('getByEmployeeIdAndDeductionId', 'employeeDeductionId', employeeDeductionId)
            const localVarPath = `/v1/employees/{employeeId}/deductions/{employeeDeductionId}`
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)))
                .replace(`{${"employeeDeductionId"}}`, encodeURIComponent(String(employeeDeductionId !== undefined ? employeeDeductionId : `-employeeDeductionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Access-Token required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "accessToken", configuration })
            // authentication Apim-Subscription-Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Ocp-Apim-Subscription-Key", keyParamName: "apimSubscriptionKey", configuration })
            if (include) {
                localVarQueryParameter['include'] = include;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employeeId}/deductions/{employeeDeductionId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Data Access: Update Employee Deduction
         * @summary Update Employee Deduction by EmployeeID
         * @param {string} employeeId ID of an Employee that has the Deduction you wish to update
         * @param {EmployeeDeduction3} employeeDeduction3 EmployeeDeduction with ID set and fields updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByEmployeeId: async (employeeId: string, employeeDeduction3: EmployeeDeduction3, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('updateByEmployeeId', 'employeeId', employeeId)
            // verify required parameter 'employeeDeduction3' is not null or undefined
            assertParamExists('updateByEmployeeId', 'employeeDeduction3', employeeDeduction3)
            const localVarPath = `/v1/employees/{employeeId}/deductions`
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Access-Token required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "accessToken", configuration })
            // authentication Apim-Subscription-Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Ocp-Apim-Subscription-Key", keyParamName: "apimSubscriptionKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeeDeduction3,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employeeId}/deductions',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeeDeduction3, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployeeDeductionsApi - functional programming interface
 * @export
 */
export const EmployeeDeductionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmployeeDeductionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Tip: first call \"Get Legal Entity Deductions by Legal Entity ID\" to get the valid Deduction Codes  Data Access: Add Employee Deduction
         * @summary Add Deduction to Employee
         * @param {EmployeeDeductionsApiAddDeductionToEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addDeductionToEmployee(requestParameters: EmployeeDeductionsApiAddDeductionToEmployeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CreateOrUpdateResponse>>> {
            const employeeDeduction2: EmployeeDeduction2 = {
                Code: requestParameters.Code,
                OnHold: requestParameters.OnHold,
                Frequency: requestParameters.Frequency,
                IncludeInPay: requestParameters.IncludeInPay,
                AmountData: requestParameters.AmountData
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addDeductionToEmployee(requestParameters.employeeId, employeeDeduction2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Data Access: View Employee Deductions Information
         * @summary Get Employee Deductions by EmployeeID
         * @param {EmployeeDeductionsApiGetByEmployeeIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByEmployeeId(requestParameters: EmployeeDeductionsApiGetByEmployeeIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedResultOfEmployeeDeduction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByEmployeeId(requestParameters.employeeId, requestParameters.include, requestParameters.continuationToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Data Access: View Employee Deduction Information
         * @summary Get Employee Deduction by EmployeeID and EmployeeDeductionID
         * @param {EmployeeDeductionsApiGetByEmployeeIdAndDeductionIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByEmployeeIdAndDeductionId(requestParameters: EmployeeDeductionsApiGetByEmployeeIdAndDeductionIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeDeduction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByEmployeeIdAndDeductionId(requestParameters.employeeId, requestParameters.employeeDeductionId, requestParameters.include, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Data Access: Update Employee Deduction
         * @summary Update Employee Deduction by EmployeeID
         * @param {EmployeeDeductionsApiUpdateByEmployeeIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByEmployeeId(requestParameters: EmployeeDeductionsApiUpdateByEmployeeIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOrUpdateResponse>> {
            const employeeDeduction3: EmployeeDeduction3 = {
                Id: requestParameters.Id,
                IncludeInPay: requestParameters.IncludeInPay,
                Frequency: requestParameters.Frequency,
                OnHold: requestParameters.OnHold,
                AmountData: requestParameters.AmountData
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByEmployeeId(requestParameters.employeeId, employeeDeduction3, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmployeeDeductionsApi - factory interface
 * @export
 */
export const EmployeeDeductionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmployeeDeductionsApiFp(configuration)
    return {
        /**
         * Tip: first call \"Get Legal Entity Deductions by Legal Entity ID\" to get the valid Deduction Codes  Data Access: Add Employee Deduction
         * @summary Add Deduction to Employee
         * @param {EmployeeDeductionsApiAddDeductionToEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDeductionToEmployee(requestParameters: EmployeeDeductionsApiAddDeductionToEmployeeRequest, options?: AxiosRequestConfig): AxiosPromise<Array<CreateOrUpdateResponse>> {
            return localVarFp.addDeductionToEmployee(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Data Access: View Employee Deductions Information
         * @summary Get Employee Deductions by EmployeeID
         * @param {EmployeeDeductionsApiGetByEmployeeIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByEmployeeId(requestParameters: EmployeeDeductionsApiGetByEmployeeIdRequest, options?: AxiosRequestConfig): AxiosPromise<PagedResultOfEmployeeDeduction> {
            return localVarFp.getByEmployeeId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Data Access: View Employee Deduction Information
         * @summary Get Employee Deduction by EmployeeID and EmployeeDeductionID
         * @param {EmployeeDeductionsApiGetByEmployeeIdAndDeductionIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByEmployeeIdAndDeductionId(requestParameters: EmployeeDeductionsApiGetByEmployeeIdAndDeductionIdRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeeDeduction> {
            return localVarFp.getByEmployeeIdAndDeductionId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Data Access: Update Employee Deduction
         * @summary Update Employee Deduction by EmployeeID
         * @param {EmployeeDeductionsApiUpdateByEmployeeIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByEmployeeId(requestParameters: EmployeeDeductionsApiUpdateByEmployeeIdRequest, options?: AxiosRequestConfig): AxiosPromise<CreateOrUpdateResponse> {
            return localVarFp.updateByEmployeeId(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addDeductionToEmployee operation in EmployeeDeductionsApi.
 * @export
 * @interface EmployeeDeductionsApiAddDeductionToEmployeeRequest
 */
export type EmployeeDeductionsApiAddDeductionToEmployeeRequest = {
    
    /**
    * ID of an Employee for whom you want to add the deduction
    * @type {string}
    * @memberof EmployeeDeductionsApiAddDeductionToEmployee
    */
    readonly employeeId: string
    
} & EmployeeDeduction2

/**
 * Request parameters for getByEmployeeId operation in EmployeeDeductionsApi.
 * @export
 * @interface EmployeeDeductionsApiGetByEmployeeIdRequest
 */
export type EmployeeDeductionsApiGetByEmployeeIdRequest = {
    
    /**
    * ID of the employee for whom you want to get the deductions
    * @type {string}
    * @memberof EmployeeDeductionsApiGetByEmployeeId
    */
    readonly employeeId: string
    
    /**
    * Options to include more data: All, AmountData  Data Access required  AmountData = View Employee Deductions Amounts
    * @type {Array<Includes4>}
    * @memberof EmployeeDeductionsApiGetByEmployeeId
    */
    readonly include?: Array<Includes4>
    
    /**
    * Token to get the next set of employee earnings
    * @type {string}
    * @memberof EmployeeDeductionsApiGetByEmployeeId
    */
    readonly continuationToken?: string
    
}

/**
 * Request parameters for getByEmployeeIdAndDeductionId operation in EmployeeDeductionsApi.
 * @export
 * @interface EmployeeDeductionsApiGetByEmployeeIdAndDeductionIdRequest
 */
export type EmployeeDeductionsApiGetByEmployeeIdAndDeductionIdRequest = {
    
    /**
    * ID of an Employee for whom you want to get the deduction.
    * @type {string}
    * @memberof EmployeeDeductionsApiGetByEmployeeIdAndDeductionId
    */
    readonly employeeId: string
    
    /**
    * ID of the Employee Deduction you want to get.
    * @type {string}
    * @memberof EmployeeDeductionsApiGetByEmployeeIdAndDeductionId
    */
    readonly employeeDeductionId: string
    
    /**
    * Options to include more data: All, AmountData  Data Access required  AmountData = View Employee Deduction Amounts
    * @type {Array<Includes3>}
    * @memberof EmployeeDeductionsApiGetByEmployeeIdAndDeductionId
    */
    readonly include?: Array<Includes3>
    
}

/**
 * Request parameters for updateByEmployeeId operation in EmployeeDeductionsApi.
 * @export
 * @interface EmployeeDeductionsApiUpdateByEmployeeIdRequest
 */
export type EmployeeDeductionsApiUpdateByEmployeeIdRequest = {
    
    /**
    * ID of an Employee that has the Deduction you wish to update
    * @type {string}
    * @memberof EmployeeDeductionsApiUpdateByEmployeeId
    */
    readonly employeeId: string
    
} & EmployeeDeduction3

/**
 * EmployeeDeductionsApiGenerated - object-oriented interface
 * @export
 * @class EmployeeDeductionsApiGenerated
 * @extends {BaseAPI}
 */
export class EmployeeDeductionsApiGenerated extends BaseAPI {
    /**
     * Tip: first call \"Get Legal Entity Deductions by Legal Entity ID\" to get the valid Deduction Codes  Data Access: Add Employee Deduction
     * @summary Add Deduction to Employee
     * @param {EmployeeDeductionsApiAddDeductionToEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeDeductionsApiGenerated
     */
    public addDeductionToEmployee(requestParameters: EmployeeDeductionsApiAddDeductionToEmployeeRequest, options?: AxiosRequestConfig) {
        return EmployeeDeductionsApiFp(this.configuration).addDeductionToEmployee(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Data Access: View Employee Deductions Information
     * @summary Get Employee Deductions by EmployeeID
     * @param {EmployeeDeductionsApiGetByEmployeeIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeDeductionsApiGenerated
     */
    public getByEmployeeId(requestParameters: EmployeeDeductionsApiGetByEmployeeIdRequest, options?: AxiosRequestConfig) {
        return EmployeeDeductionsApiFp(this.configuration).getByEmployeeId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Data Access: View Employee Deduction Information
     * @summary Get Employee Deduction by EmployeeID and EmployeeDeductionID
     * @param {EmployeeDeductionsApiGetByEmployeeIdAndDeductionIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeDeductionsApiGenerated
     */
    public getByEmployeeIdAndDeductionId(requestParameters: EmployeeDeductionsApiGetByEmployeeIdAndDeductionIdRequest, options?: AxiosRequestConfig) {
        return EmployeeDeductionsApiFp(this.configuration).getByEmployeeIdAndDeductionId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Data Access: Update Employee Deduction
     * @summary Update Employee Deduction by EmployeeID
     * @param {EmployeeDeductionsApiUpdateByEmployeeIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeDeductionsApiGenerated
     */
    public updateByEmployeeId(requestParameters: EmployeeDeductionsApiUpdateByEmployeeIdRequest, options?: AxiosRequestConfig) {
        return EmployeeDeductionsApiFp(this.configuration).updateByEmployeeId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
