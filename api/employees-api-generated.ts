/* tslint:disable */
/* eslint-disable */
/*
Paycor Public API


Welcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section. 

# Getting Started

<strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>

# GET, PUT, POST

* When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc]. 
* When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system.
* When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'


# Error Handling

* 400: Please consult the response text to correct your request information. 
* 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key. 
* 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header.
* 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen. 
* 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state. 
* 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.
  * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs). 
* 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.


# IDs

* ClientId = LegalEntityId
* TenantId = CompanyId
* EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API

# Earnings, Deductions, Taxes

This section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints. 

Paycor stores Earnings, Deductions, and Taxes each at three levels:
* Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):
  * Earnings: REG, OT
  * Taxes: FITWH, SOC, SOCER, OHCIN
  * Deductions: 401k, KMat, H125, UWay
* Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code. 
  * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints. 
* Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code
  * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden. 

# Authentication

<!-- ReDoc-Inject: <security-definitions> -->

The version of the OpenAPI document: 


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateOrUpdateResponse } from '../models';
// @ts-ignore
import { DisabilityStatus } from '../models';
// @ts-ignore
import { EligibleForRehire } from '../models';
// @ts-ignore
import { EmailTypeOptions } from '../models';
// @ts-ignore
import { EmailTypeOptions2 } from '../models';
// @ts-ignore
import { Employee2 } from '../models';
// @ts-ignore
import { EmployeeContact } from '../models';
// @ts-ignore
import { EmployeeIdentifyingData } from '../models';
// @ts-ignore
import { EmployeePosition } from '../models';
// @ts-ignore
import { EmployeePositionAndStatus } from '../models';
// @ts-ignore
import { EmployeeReturnItem } from '../models';
// @ts-ignore
import { EmployeeStatusUpdate } from '../models';
// @ts-ignore
import { EmploymentStatus } from '../models';
// @ts-ignore
import { EmploymentStatus2 } from '../models';
// @ts-ignore
import { EmploymentType } from '../models';
// @ts-ignore
import { EthnicityType } from '../models';
// @ts-ignore
import { FlsaType } from '../models';
// @ts-ignore
import { Gender } from '../models';
// @ts-ignore
import { GenericAddress } from '../models';
// @ts-ignore
import { Includes13 } from '../models';
// @ts-ignore
import { Includes14 } from '../models';
// @ts-ignore
import { Includes15 } from '../models';
// @ts-ignore
import { MaritalStatus } from '../models';
// @ts-ignore
import { PagedResultOfEmployeeList } from '../models';
// @ts-ignore
import { PagedResultOfEmployeeReturnItem } from '../models';
// @ts-ignore
import { PagedResultOfEmployeesIdentifyingData } from '../models';
// @ts-ignore
import { PaycorError } from '../models';
// @ts-ignore
import { Phone } from '../models';
// @ts-ignore
import { Prefix } from '../models';
// @ts-ignore
import { Suffix } from '../models';
// @ts-ignore
import { VeteranStatus } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EmployeesApi - axios parameter creator
 * @export
 */
export const EmployeesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This immediately \"hires\" a new employee and associated Person in Paycor\'s system. There is no way to undo or reverse this operation. After creating an employee, please wait sixty seconds before using employeeId to call other endpoints.              Data Access: Create Employee
         * @summary Create Employee
         * @param {Employee2} employee2 Create Employee model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewEmployee: async (employee2: Employee2, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employee2' is not null or undefined
            assertParamExists('createNewEmployee', 'employee2', employee2)
            const localVarPath = `/v1/employees`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Access-Token required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "accessToken", configuration })
            // authentication Apim-Subscription-Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Ocp-Apim-Subscription-Key", keyParamName: "apimSubscriptionKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employee2,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employee2, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Tip: you can retrieve a valid EmployeeID guid via endpoints like \'Get Employees by Legal Entity ID\'              Data Access: View Employee Information
         * @summary Get Employee by EmployeeID
         * @param {string} employeeId ID of the Employee you want to get
         * @param {Array<Includes13>} [include] Options to include more data: All, EmploymentDates, Status, Position, WorkLocation              Data Access required              EmploymentDates &#x3D; View Employee Employment Dates              Status &#x3D; View Employee Status              Position &#x3D; View Employee Position              WorkLocation &#x3D; View Employee Work Location
         * @param {EmailTypeOptions} [emailType] Options to specify which emaill address to return. Work email type will be returned if none are specified: Home, Work
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByEmployeeId: async (employeeId: string, include?: Array<Includes13>, emailType?: EmailTypeOptions, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getByEmployeeId', 'employeeId', employeeId)
            const localVarPath = `/v1/employees/{employeeId}`
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Access-Token required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "accessToken", configuration })
            // authentication Apim-Subscription-Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Ocp-Apim-Subscription-Key", keyParamName: "apimSubscriptionKey", configuration })
            if (include) {
                localVarQueryParameter['include'] = include;
            }

            if (emailType !== undefined) {
                localVarQueryParameter['emailType'] = emailType;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employeeId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Data Access: View Legal Entity Employees Identifying Data              Optional Data Access: View Legal Entity Employees SSN and BirthDate
         * @summary GET Identifying Employee Data by Legal Entity Id
         * @param {number} legalEntityId ID of the legal entity for which you want to get employees
         * @param {Array<Includes15>} [include] Options to filter employees by employment status: Active, Inactive
         * @param {string} [continuationToken] Token to get the next set of data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIdentifyingData: async (legalEntityId: number, include?: Array<Includes15>, continuationToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'legalEntityId' is not null or undefined
            assertParamExists('getIdentifyingData', 'legalEntityId', legalEntityId)
            const localVarPath = `/v1/legalentities/{legalEntityId}/employeesIdentifyingData`
                .replace(`{${"legalEntityId"}}`, encodeURIComponent(String(legalEntityId !== undefined ? legalEntityId : `-legalEntityId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Access-Token required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "accessToken", configuration })
            // authentication Apim-Subscription-Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Ocp-Apim-Subscription-Key", keyParamName: "apimSubscriptionKey", configuration })
            if (include) {
                localVarQueryParameter['include'] = include;
            }

            if (continuationToken !== undefined) {
                localVarQueryParameter['continuationToken'] = continuationToken;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/legalentities/{legalEntityId}/employeesIdentifyingData',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Data Access: View Legal Entity Employees
         * @summary Get Employees by Legal Entity ID
         * @param {number} legalEntityId ID of the legal entity for which you want to get employees
         * @param {Array<Includes14>} [include] Options to include more data: All, EmploymentDates, Status, Position, WorkLocation              Data Access required              EmploymentDates &#x3D; View Legal Entity Employees Employment Dates              Status &#x3D; View Legal Entity Employees Status              Position &#x3D; View Legal Entity Employees Position              WorkLocation &#x3D; View Legal Entity Employees Work Location
         * @param {EmailTypeOptions2} [emailType] Options to specify which email address to return. Work email type will be returned if none are specified: Home, Work
         * @param {EmploymentStatus} [statusFilter] Option to filter by employment status.
         * @param {number} [employeeNumber] Option to filter by Employee Number.
         * @param {string} [lastName] Option to filter by Employee Last Name.
         * @param {number} [departmentCode] Option to filter by Department Code.
         * @param {string} [workLocationName] Option to filter by Work Location Name.
         * @param {string} [continuationToken] Token to get the next set of employees
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByLegalEntityId: async (legalEntityId: number, include?: Array<Includes14>, emailType?: EmailTypeOptions2, statusFilter?: EmploymentStatus, employeeNumber?: number, lastName?: string, departmentCode?: number, workLocationName?: string, continuationToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'legalEntityId' is not null or undefined
            assertParamExists('listByLegalEntityId', 'legalEntityId', legalEntityId)
            const localVarPath = `/v1/legalentities/{legalEntityId}/employees`
                .replace(`{${"legalEntityId"}}`, encodeURIComponent(String(legalEntityId !== undefined ? legalEntityId : `-legalEntityId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Access-Token required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "accessToken", configuration })
            // authentication Apim-Subscription-Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Ocp-Apim-Subscription-Key", keyParamName: "apimSubscriptionKey", configuration })
            if (include) {
                localVarQueryParameter['include'] = include;
            }

            if (emailType !== undefined) {
                localVarQueryParameter['emailType'] = emailType;
            }

            if (statusFilter !== undefined) {
                localVarQueryParameter['statusFilter'] = statusFilter;
            }

            if (employeeNumber !== undefined) {
                localVarQueryParameter['employeeNumber'] = employeeNumber;
            }

            if (lastName !== undefined) {
                localVarQueryParameter['lastName'] = lastName;
            }

            if (departmentCode !== undefined) {
                localVarQueryParameter['departmentCode'] = departmentCode;
            }

            if (workLocationName !== undefined) {
                localVarQueryParameter['workLocationName'] = workLocationName;
            }

            if (continuationToken !== undefined) {
                localVarQueryParameter['continuationToken'] = continuationToken;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/legalentities/{legalEntityId}/employees',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Data Access: View Tenant Employees
         * @summary Get Employees By TenantID
         * @param {number} tenantId ID of the tenant for which you want to get employees
         * @param {EmploymentStatus} [statusFilter] Option to filter by employment status
         * @param {number} [employeeNumber] Option to filter by Employee Number.
         * @param {string} [lastName] Option to filter by Employee Last Name.
         * @param {number} [departmentCode] Option to filter by Department Code.
         * @param {string} [workLocationName] Option to filter by Work Location Name.
         * @param {string} [jobCode] Option to filter by Job Code.
         * @param {string} [continuationToken] Token to get the next set of employees
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByTenantId: async (tenantId: number, statusFilter?: EmploymentStatus, employeeNumber?: number, lastName?: string, departmentCode?: number, workLocationName?: string, jobCode?: string, continuationToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('listByTenantId', 'tenantId', tenantId)
            const localVarPath = `/v1/tenants/{tenantId}/employees`
                .replace(`{${"tenantId"}}`, encodeURIComponent(String(tenantId !== undefined ? tenantId : `-tenantId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Access-Token required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "accessToken", configuration })
            // authentication Apim-Subscription-Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Ocp-Apim-Subscription-Key", keyParamName: "apimSubscriptionKey", configuration })
            if (statusFilter !== undefined) {
                localVarQueryParameter['statusFilter'] = statusFilter;
            }

            if (employeeNumber !== undefined) {
                localVarQueryParameter['employeeNumber'] = employeeNumber;
            }

            if (lastName !== undefined) {
                localVarQueryParameter['lastName'] = lastName;
            }

            if (departmentCode !== undefined) {
                localVarQueryParameter['departmentCode'] = departmentCode;
            }

            if (workLocationName !== undefined) {
                localVarQueryParameter['workLocationName'] = workLocationName;
            }

            if (jobCode !== undefined) {
                localVarQueryParameter['jobCode'] = jobCode;
            }

            if (continuationToken !== undefined) {
                localVarQueryParameter['continuationToken'] = continuationToken;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/tenants/{tenantId}/employees',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This immediately updates an employee\'s contact information and associated Person\'s in Paycor\'s system.              Data Access: Update Employee Contact
         * @summary Update Employee Contact
         * @param {string} employeeId Id of the employee
         * @param {EmployeeContact} employeeContact Put Employee Contact model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateContact: async (employeeId: string, employeeContact: EmployeeContact, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('updateContact', 'employeeId', employeeId)
            // verify required parameter 'employeeContact' is not null or undefined
            assertParamExists('updateContact', 'employeeContact', employeeContact)
            const localVarPath = `/v1/employees/{employeeId}`
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Access-Token required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "accessToken", configuration })
            // authentication Apim-Subscription-Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Ocp-Apim-Subscription-Key", keyParamName: "apimSubscriptionKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeeContact,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employeeId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeeContact, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint updates an employee\'s paygroup.              Data Access: Update Employee Paygroup
         * @summary Update Employee Paygroup
         * @param {string} employeeId Id of the employee
         * @param {string} [payGroupId] ID of the Paygroup for whom you want to get the Pay Schedule. Available via \&#39;GET Legal Entity Pay Groups\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePaygroup: async (employeeId: string, payGroupId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('updatePaygroup', 'employeeId', employeeId)
            const localVarPath = `/v1/employees/{employeeId}/Paygroup`
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Access-Token required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "accessToken", configuration })
            // authentication Apim-Subscription-Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Ocp-Apim-Subscription-Key", keyParamName: "apimSubscriptionKey", configuration })
            if (payGroupId !== undefined) {
                localVarQueryParameter['payGroupId'] = payGroupId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employeeId}/Paygroup',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint updates an employee\'s personal information.              Data Access: Update Employee Identifying Data
         * @summary Update Employee Personal data
         * @param {string} employeeId Id of the employee
         * @param {EmployeeIdentifyingData} employeeIdentifyingData Put Employee Identifying data model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePersonalData: async (employeeId: string, employeeIdentifyingData: EmployeeIdentifyingData, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('updatePersonalData', 'employeeId', employeeId)
            // verify required parameter 'employeeIdentifyingData' is not null or undefined
            assertParamExists('updatePersonalData', 'employeeIdentifyingData', employeeIdentifyingData)
            const localVarPath = `/v1/employees/{employeeId}/identifyingdata`
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Access-Token required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "accessToken", configuration })
            // authentication Apim-Subscription-Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Ocp-Apim-Subscription-Key", keyParamName: "apimSubscriptionKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeeIdentifyingData,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employeeId}/identifyingdata',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeeIdentifyingData, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint updates an employee\'s status and position information.              Data Access: Update Employee Position And Status
         * @summary Update Employee Position and Status data
         * @param {string} employeeId Id of the employee
         * @param {EmployeePositionAndStatus} employeePositionAndStatus Put Employee Position and Status model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePositionAndStatusData: async (employeeId: string, employeePositionAndStatus: EmployeePositionAndStatus, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('updatePositionAndStatusData', 'employeeId', employeeId)
            // verify required parameter 'employeePositionAndStatus' is not null or undefined
            assertParamExists('updatePositionAndStatusData', 'employeePositionAndStatus', employeePositionAndStatus)
            const localVarPath = `/v1/employees/{employeeId}/positionandstatus`
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Access-Token required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "accessToken", configuration })
            // authentication Apim-Subscription-Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Ocp-Apim-Subscription-Key", keyParamName: "apimSubscriptionKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeePositionAndStatus,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employeeId}/positionandstatus',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeePositionAndStatus, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint updates an employee\'s position information.              Data Access: Update Employee Position
         * @summary Update Employee Position data
         * @param {string} employeeId Id of the employee
         * @param {EmployeePosition} employeePosition Put Employee Position model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePositionData: async (employeeId: string, employeePosition: EmployeePosition, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('updatePositionData', 'employeeId', employeeId)
            // verify required parameter 'employeePosition' is not null or undefined
            assertParamExists('updatePositionData', 'employeePosition', employeePosition)
            const localVarPath = `/v1/employees/{employeeId}/position`
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Access-Token required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "accessToken", configuration })
            // authentication Apim-Subscription-Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Ocp-Apim-Subscription-Key", keyParamName: "apimSubscriptionKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeePosition,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employeeId}/position',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeePosition, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint updates an employee status information.              Data Access: Update Employee Status Data
         * @summary Update Employee Status data
         * @param {string} employeeId Id of the employee
         * @param {EmployeeStatusUpdate} employeeStatusUpdate Put Employee Status model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStatusData: async (employeeId: string, employeeStatusUpdate: EmployeeStatusUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('updateStatusData', 'employeeId', employeeId)
            // verify required parameter 'employeeStatusUpdate' is not null or undefined
            assertParamExists('updateStatusData', 'employeeStatusUpdate', employeeStatusUpdate)
            const localVarPath = `/v1/employees/{employeeId}/status`
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Access-Token required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "accessToken", configuration })
            // authentication Apim-Subscription-Key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Ocp-Apim-Subscription-Key", keyParamName: "apimSubscriptionKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeeStatusUpdate,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employeeId}/status',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeeStatusUpdate, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployeesApi - functional programming interface
 * @export
 */
export const EmployeesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmployeesApiAxiosParamCreator(configuration)
    return {
        /**
         * This immediately \"hires\" a new employee and associated Person in Paycor\'s system. There is no way to undo or reverse this operation. After creating an employee, please wait sixty seconds before using employeeId to call other endpoints.              Data Access: Create Employee
         * @summary Create Employee
         * @param {EmployeesApiCreateNewEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewEmployee(requestParameters: EmployeesApiCreateNewEmployeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOrUpdateResponse>> {
            const employee2: Employee2 = {
                LegalEntityId: requestParameters.LegalEntityId,
                EmployeeNumber: requestParameters.EmployeeNumber,
                AlternateEmployeeNumber: requestParameters.AlternateEmployeeNumber,
                Prefix: requestParameters.Prefix,
                FirstName: requestParameters.FirstName,
                MiddleName: requestParameters.MiddleName,
                LastName: requestParameters.LastName,
                Suffix: requestParameters.Suffix,
                HomeEmail: requestParameters.HomeEmail,
                WorkEmail: requestParameters.WorkEmail,
                Phones: requestParameters.Phones,
                SocialSecurityNumber: requestParameters.SocialSecurityNumber,
                BirthDate: requestParameters.BirthDate,
                Gender: requestParameters.Gender,
                Ethnicity: requestParameters.Ethnicity,
                MaritalStatus: requestParameters.MaritalStatus,
                WorkLocation: requestParameters.WorkLocation,
                JobTitle: requestParameters.JobTitle,
                HireDate: requestParameters.HireDate,
                ReHireDate: requestParameters.ReHireDate,
                Status: requestParameters.Status,
                Flsa: requestParameters.Flsa,
                Type: requestParameters.Type,
                ManagerEmpId: requestParameters.ManagerEmpId,
                PaygroupDescription: requestParameters.PaygroupDescription,
                DepartmentCode: requestParameters.DepartmentCode,
                Veteran: requestParameters.Veteran,
                Disability: requestParameters.Disability,
                PrimaryAddress: requestParameters.PrimaryAddress
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewEmployee(employee2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Tip: you can retrieve a valid EmployeeID guid via endpoints like \'Get Employees by Legal Entity ID\'              Data Access: View Employee Information
         * @summary Get Employee by EmployeeID
         * @param {EmployeesApiGetByEmployeeIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByEmployeeId(requestParameters: EmployeesApiGetByEmployeeIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeReturnItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByEmployeeId(requestParameters.employeeId, requestParameters.include, requestParameters.emailType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Data Access: View Legal Entity Employees Identifying Data              Optional Data Access: View Legal Entity Employees SSN and BirthDate
         * @summary GET Identifying Employee Data by Legal Entity Id
         * @param {EmployeesApiGetIdentifyingDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIdentifyingData(requestParameters: EmployeesApiGetIdentifyingDataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedResultOfEmployeesIdentifyingData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIdentifyingData(requestParameters.legalEntityId, requestParameters.include, requestParameters.continuationToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Data Access: View Legal Entity Employees
         * @summary Get Employees by Legal Entity ID
         * @param {EmployeesApiListByLegalEntityIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listByLegalEntityId(requestParameters: EmployeesApiListByLegalEntityIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedResultOfEmployeeReturnItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listByLegalEntityId(requestParameters.legalEntityId, requestParameters.include, requestParameters.emailType, requestParameters.statusFilter, requestParameters.employeeNumber, requestParameters.lastName, requestParameters.departmentCode, requestParameters.workLocationName, requestParameters.continuationToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Data Access: View Tenant Employees
         * @summary Get Employees By TenantID
         * @param {EmployeesApiListByTenantIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listByTenantId(requestParameters: EmployeesApiListByTenantIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedResultOfEmployeeList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listByTenantId(requestParameters.tenantId, requestParameters.statusFilter, requestParameters.employeeNumber, requestParameters.lastName, requestParameters.departmentCode, requestParameters.workLocationName, requestParameters.jobCode, requestParameters.continuationToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This immediately updates an employee\'s contact information and associated Person\'s in Paycor\'s system.              Data Access: Update Employee Contact
         * @summary Update Employee Contact
         * @param {EmployeesApiUpdateContactRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateContact(requestParameters: EmployeesApiUpdateContactRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOrUpdateResponse>> {
            const employeeContact: EmployeeContact = {
                HomeEmail: requestParameters.HomeEmail,
                WorkEmail: requestParameters.WorkEmail,
                Phones: requestParameters.Phones,
                PrimaryAddress: requestParameters.PrimaryAddress
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateContact(requestParameters.employeeId, employeeContact, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint updates an employee\'s paygroup.              Data Access: Update Employee Paygroup
         * @summary Update Employee Paygroup
         * @param {EmployeesApiUpdatePaygroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePaygroup(requestParameters: EmployeesApiUpdatePaygroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOrUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePaygroup(requestParameters.employeeId, requestParameters.payGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint updates an employee\'s personal information.              Data Access: Update Employee Identifying Data
         * @summary Update Employee Personal data
         * @param {EmployeesApiUpdatePersonalDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePersonalData(requestParameters: EmployeesApiUpdatePersonalDataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOrUpdateResponse>> {
            const employeeIdentifyingData: EmployeeIdentifyingData = {
                FirstName: requestParameters.FirstName,
                LastName: requestParameters.LastName,
                MiddleName: requestParameters.MiddleName,
                Suffix: requestParameters.Suffix,
                SocialSecurityNumber: requestParameters.SocialSecurityNumber,
                BirthDate: requestParameters.BirthDate
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePersonalData(requestParameters.employeeId, employeeIdentifyingData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint updates an employee\'s status and position information.              Data Access: Update Employee Position And Status
         * @summary Update Employee Position and Status data
         * @param {EmployeesApiUpdatePositionAndStatusDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePositionAndStatusData(requestParameters: EmployeesApiUpdatePositionAndStatusDataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOrUpdateResponse>> {
            const employeePositionAndStatus: EmployeePositionAndStatus = {
                EmploymentStatus: requestParameters.EmploymentStatus,
                RehireDate: requestParameters.RehireDate,
                EmploymentType: requestParameters.EmploymentType,
                WorkLocation: requestParameters.WorkLocation,
                JobTitle: requestParameters.JobTitle,
                Flsa: requestParameters.Flsa,
                ManagerId: requestParameters.ManagerId,
                DepartmentId: requestParameters.DepartmentId
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePositionAndStatusData(requestParameters.employeeId, employeePositionAndStatus, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint updates an employee\'s position information.              Data Access: Update Employee Position
         * @summary Update Employee Position data
         * @param {EmployeesApiUpdatePositionDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePositionData(requestParameters: EmployeesApiUpdatePositionDataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOrUpdateResponse>> {
            const employeePosition: EmployeePosition = {
                EmploymentType: requestParameters.EmploymentType,
                WorkLocation: requestParameters.WorkLocation,
                JobTitle: requestParameters.JobTitle,
                Flsa: requestParameters.Flsa,
                ManagerId: requestParameters.ManagerId,
                DepartmentId: requestParameters.DepartmentId
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePositionData(requestParameters.employeeId, employeePosition, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint updates an employee status information.              Data Access: Update Employee Status Data
         * @summary Update Employee Status data
         * @param {EmployeesApiUpdateStatusDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStatusData(requestParameters: EmployeesApiUpdateStatusDataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOrUpdateResponse>> {
            const employeeStatusUpdate: EmployeeStatusUpdate = {
                EffectiveDate: requestParameters.EffectiveDate,
                EmployeeStatus: requestParameters.EmployeeStatus,
                EmployeeStatusReasonId: requestParameters.EmployeeStatusReasonId,
                EligibleForRehire: requestParameters.EligibleForRehire,
                IsVoluntaryByEmployee: requestParameters.IsVoluntaryByEmployee,
                Notes: requestParameters.Notes
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStatusData(requestParameters.employeeId, employeeStatusUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmployeesApi - factory interface
 * @export
 */
export const EmployeesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmployeesApiFp(configuration)
    return {
        /**
         * This immediately \"hires\" a new employee and associated Person in Paycor\'s system. There is no way to undo or reverse this operation. After creating an employee, please wait sixty seconds before using employeeId to call other endpoints.              Data Access: Create Employee
         * @summary Create Employee
         * @param {EmployeesApiCreateNewEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewEmployee(requestParameters: EmployeesApiCreateNewEmployeeRequest, options?: AxiosRequestConfig): AxiosPromise<CreateOrUpdateResponse> {
            return localVarFp.createNewEmployee(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Tip: you can retrieve a valid EmployeeID guid via endpoints like \'Get Employees by Legal Entity ID\'              Data Access: View Employee Information
         * @summary Get Employee by EmployeeID
         * @param {EmployeesApiGetByEmployeeIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByEmployeeId(requestParameters: EmployeesApiGetByEmployeeIdRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeeReturnItem> {
            return localVarFp.getByEmployeeId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Data Access: View Legal Entity Employees Identifying Data              Optional Data Access: View Legal Entity Employees SSN and BirthDate
         * @summary GET Identifying Employee Data by Legal Entity Id
         * @param {EmployeesApiGetIdentifyingDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIdentifyingData(requestParameters: EmployeesApiGetIdentifyingDataRequest, options?: AxiosRequestConfig): AxiosPromise<PagedResultOfEmployeesIdentifyingData> {
            return localVarFp.getIdentifyingData(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Data Access: View Legal Entity Employees
         * @summary Get Employees by Legal Entity ID
         * @param {EmployeesApiListByLegalEntityIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByLegalEntityId(requestParameters: EmployeesApiListByLegalEntityIdRequest, options?: AxiosRequestConfig): AxiosPromise<PagedResultOfEmployeeReturnItem> {
            return localVarFp.listByLegalEntityId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Data Access: View Tenant Employees
         * @summary Get Employees By TenantID
         * @param {EmployeesApiListByTenantIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByTenantId(requestParameters: EmployeesApiListByTenantIdRequest, options?: AxiosRequestConfig): AxiosPromise<PagedResultOfEmployeeList> {
            return localVarFp.listByTenantId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This immediately updates an employee\'s contact information and associated Person\'s in Paycor\'s system.              Data Access: Update Employee Contact
         * @summary Update Employee Contact
         * @param {EmployeesApiUpdateContactRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateContact(requestParameters: EmployeesApiUpdateContactRequest, options?: AxiosRequestConfig): AxiosPromise<CreateOrUpdateResponse> {
            return localVarFp.updateContact(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint updates an employee\'s paygroup.              Data Access: Update Employee Paygroup
         * @summary Update Employee Paygroup
         * @param {EmployeesApiUpdatePaygroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePaygroup(requestParameters: EmployeesApiUpdatePaygroupRequest, options?: AxiosRequestConfig): AxiosPromise<CreateOrUpdateResponse> {
            return localVarFp.updatePaygroup(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint updates an employee\'s personal information.              Data Access: Update Employee Identifying Data
         * @summary Update Employee Personal data
         * @param {EmployeesApiUpdatePersonalDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePersonalData(requestParameters: EmployeesApiUpdatePersonalDataRequest, options?: AxiosRequestConfig): AxiosPromise<CreateOrUpdateResponse> {
            return localVarFp.updatePersonalData(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint updates an employee\'s status and position information.              Data Access: Update Employee Position And Status
         * @summary Update Employee Position and Status data
         * @param {EmployeesApiUpdatePositionAndStatusDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePositionAndStatusData(requestParameters: EmployeesApiUpdatePositionAndStatusDataRequest, options?: AxiosRequestConfig): AxiosPromise<CreateOrUpdateResponse> {
            return localVarFp.updatePositionAndStatusData(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint updates an employee\'s position information.              Data Access: Update Employee Position
         * @summary Update Employee Position data
         * @param {EmployeesApiUpdatePositionDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePositionData(requestParameters: EmployeesApiUpdatePositionDataRequest, options?: AxiosRequestConfig): AxiosPromise<CreateOrUpdateResponse> {
            return localVarFp.updatePositionData(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint updates an employee status information.              Data Access: Update Employee Status Data
         * @summary Update Employee Status data
         * @param {EmployeesApiUpdateStatusDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStatusData(requestParameters: EmployeesApiUpdateStatusDataRequest, options?: AxiosRequestConfig): AxiosPromise<CreateOrUpdateResponse> {
            return localVarFp.updateStatusData(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewEmployee operation in EmployeesApi.
 * @export
 * @interface EmployeesApiCreateNewEmployeeRequest
 */
export type EmployeesApiCreateNewEmployeeRequest = {
    
} & Employee2

/**
 * Request parameters for getByEmployeeId operation in EmployeesApi.
 * @export
 * @interface EmployeesApiGetByEmployeeIdRequest
 */
export type EmployeesApiGetByEmployeeIdRequest = {
    
    /**
    * ID of the Employee you want to get
    * @type {string}
    * @memberof EmployeesApiGetByEmployeeId
    */
    readonly employeeId: string
    
    /**
    * Options to include more data: All, EmploymentDates, Status, Position, WorkLocation              Data Access required              EmploymentDates = View Employee Employment Dates              Status = View Employee Status              Position = View Employee Position              WorkLocation = View Employee Work Location
    * @type {Array<Includes13>}
    * @memberof EmployeesApiGetByEmployeeId
    */
    readonly include?: Array<Includes13>
    
    /**
    * Options to specify which emaill address to return. Work email type will be returned if none are specified: Home, Work
    * @type {EmailTypeOptions}
    * @memberof EmployeesApiGetByEmployeeId
    */
    readonly emailType?: EmailTypeOptions
    
}

/**
 * Request parameters for getIdentifyingData operation in EmployeesApi.
 * @export
 * @interface EmployeesApiGetIdentifyingDataRequest
 */
export type EmployeesApiGetIdentifyingDataRequest = {
    
    /**
    * ID of the legal entity for which you want to get employees
    * @type {number}
    * @memberof EmployeesApiGetIdentifyingData
    */
    readonly legalEntityId: number
    
    /**
    * Options to filter employees by employment status: Active, Inactive
    * @type {Array<Includes15>}
    * @memberof EmployeesApiGetIdentifyingData
    */
    readonly include?: Array<Includes15>
    
    /**
    * Token to get the next set of data
    * @type {string}
    * @memberof EmployeesApiGetIdentifyingData
    */
    readonly continuationToken?: string
    
}

/**
 * Request parameters for listByLegalEntityId operation in EmployeesApi.
 * @export
 * @interface EmployeesApiListByLegalEntityIdRequest
 */
export type EmployeesApiListByLegalEntityIdRequest = {
    
    /**
    * ID of the legal entity for which you want to get employees
    * @type {number}
    * @memberof EmployeesApiListByLegalEntityId
    */
    readonly legalEntityId: number
    
    /**
    * Options to include more data: All, EmploymentDates, Status, Position, WorkLocation              Data Access required              EmploymentDates = View Legal Entity Employees Employment Dates              Status = View Legal Entity Employees Status              Position = View Legal Entity Employees Position              WorkLocation = View Legal Entity Employees Work Location
    * @type {Array<Includes14>}
    * @memberof EmployeesApiListByLegalEntityId
    */
    readonly include?: Array<Includes14>
    
    /**
    * Options to specify which email address to return. Work email type will be returned if none are specified: Home, Work
    * @type {EmailTypeOptions2}
    * @memberof EmployeesApiListByLegalEntityId
    */
    readonly emailType?: EmailTypeOptions2
    
    /**
    * Option to filter by employment status.
    * @type {EmploymentStatus}
    * @memberof EmployeesApiListByLegalEntityId
    */
    readonly statusFilter?: EmploymentStatus
    
    /**
    * Option to filter by Employee Number.
    * @type {number}
    * @memberof EmployeesApiListByLegalEntityId
    */
    readonly employeeNumber?: number
    
    /**
    * Option to filter by Employee Last Name.
    * @type {string}
    * @memberof EmployeesApiListByLegalEntityId
    */
    readonly lastName?: string
    
    /**
    * Option to filter by Department Code.
    * @type {number}
    * @memberof EmployeesApiListByLegalEntityId
    */
    readonly departmentCode?: number
    
    /**
    * Option to filter by Work Location Name.
    * @type {string}
    * @memberof EmployeesApiListByLegalEntityId
    */
    readonly workLocationName?: string
    
    /**
    * Token to get the next set of employees
    * @type {string}
    * @memberof EmployeesApiListByLegalEntityId
    */
    readonly continuationToken?: string
    
}

/**
 * Request parameters for listByTenantId operation in EmployeesApi.
 * @export
 * @interface EmployeesApiListByTenantIdRequest
 */
export type EmployeesApiListByTenantIdRequest = {
    
    /**
    * ID of the tenant for which you want to get employees
    * @type {number}
    * @memberof EmployeesApiListByTenantId
    */
    readonly tenantId: number
    
    /**
    * Option to filter by employment status
    * @type {EmploymentStatus}
    * @memberof EmployeesApiListByTenantId
    */
    readonly statusFilter?: EmploymentStatus
    
    /**
    * Option to filter by Employee Number.
    * @type {number}
    * @memberof EmployeesApiListByTenantId
    */
    readonly employeeNumber?: number
    
    /**
    * Option to filter by Employee Last Name.
    * @type {string}
    * @memberof EmployeesApiListByTenantId
    */
    readonly lastName?: string
    
    /**
    * Option to filter by Department Code.
    * @type {number}
    * @memberof EmployeesApiListByTenantId
    */
    readonly departmentCode?: number
    
    /**
    * Option to filter by Work Location Name.
    * @type {string}
    * @memberof EmployeesApiListByTenantId
    */
    readonly workLocationName?: string
    
    /**
    * Option to filter by Job Code.
    * @type {string}
    * @memberof EmployeesApiListByTenantId
    */
    readonly jobCode?: string
    
    /**
    * Token to get the next set of employees
    * @type {string}
    * @memberof EmployeesApiListByTenantId
    */
    readonly continuationToken?: string
    
}

/**
 * Request parameters for updateContact operation in EmployeesApi.
 * @export
 * @interface EmployeesApiUpdateContactRequest
 */
export type EmployeesApiUpdateContactRequest = {
    
    /**
    * Id of the employee
    * @type {string}
    * @memberof EmployeesApiUpdateContact
    */
    readonly employeeId: string
    
} & EmployeeContact

/**
 * Request parameters for updatePaygroup operation in EmployeesApi.
 * @export
 * @interface EmployeesApiUpdatePaygroupRequest
 */
export type EmployeesApiUpdatePaygroupRequest = {
    
    /**
    * Id of the employee
    * @type {string}
    * @memberof EmployeesApiUpdatePaygroup
    */
    readonly employeeId: string
    
    /**
    * ID of the Paygroup for whom you want to get the Pay Schedule. Available via \'GET Legal Entity Pay Groups\'
    * @type {string}
    * @memberof EmployeesApiUpdatePaygroup
    */
    readonly payGroupId?: string
    
}

/**
 * Request parameters for updatePersonalData operation in EmployeesApi.
 * @export
 * @interface EmployeesApiUpdatePersonalDataRequest
 */
export type EmployeesApiUpdatePersonalDataRequest = {
    
    /**
    * Id of the employee
    * @type {string}
    * @memberof EmployeesApiUpdatePersonalData
    */
    readonly employeeId: string
    
} & EmployeeIdentifyingData

/**
 * Request parameters for updatePositionAndStatusData operation in EmployeesApi.
 * @export
 * @interface EmployeesApiUpdatePositionAndStatusDataRequest
 */
export type EmployeesApiUpdatePositionAndStatusDataRequest = {
    
    /**
    * Id of the employee
    * @type {string}
    * @memberof EmployeesApiUpdatePositionAndStatusData
    */
    readonly employeeId: string
    
} & EmployeePositionAndStatus

/**
 * Request parameters for updatePositionData operation in EmployeesApi.
 * @export
 * @interface EmployeesApiUpdatePositionDataRequest
 */
export type EmployeesApiUpdatePositionDataRequest = {
    
    /**
    * Id of the employee
    * @type {string}
    * @memberof EmployeesApiUpdatePositionData
    */
    readonly employeeId: string
    
} & EmployeePosition

/**
 * Request parameters for updateStatusData operation in EmployeesApi.
 * @export
 * @interface EmployeesApiUpdateStatusDataRequest
 */
export type EmployeesApiUpdateStatusDataRequest = {
    
    /**
    * Id of the employee
    * @type {string}
    * @memberof EmployeesApiUpdateStatusData
    */
    readonly employeeId: string
    
} & EmployeeStatusUpdate

/**
 * EmployeesApiGenerated - object-oriented interface
 * @export
 * @class EmployeesApiGenerated
 * @extends {BaseAPI}
 */
export class EmployeesApiGenerated extends BaseAPI {
    /**
     * This immediately \"hires\" a new employee and associated Person in Paycor\'s system. There is no way to undo or reverse this operation. After creating an employee, please wait sixty seconds before using employeeId to call other endpoints.              Data Access: Create Employee
     * @summary Create Employee
     * @param {EmployeesApiCreateNewEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApiGenerated
     */
    public createNewEmployee(requestParameters: EmployeesApiCreateNewEmployeeRequest, options?: AxiosRequestConfig) {
        return EmployeesApiFp(this.configuration).createNewEmployee(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Tip: you can retrieve a valid EmployeeID guid via endpoints like \'Get Employees by Legal Entity ID\'              Data Access: View Employee Information
     * @summary Get Employee by EmployeeID
     * @param {EmployeesApiGetByEmployeeIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApiGenerated
     */
    public getByEmployeeId(requestParameters: EmployeesApiGetByEmployeeIdRequest, options?: AxiosRequestConfig) {
        return EmployeesApiFp(this.configuration).getByEmployeeId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Data Access: View Legal Entity Employees Identifying Data              Optional Data Access: View Legal Entity Employees SSN and BirthDate
     * @summary GET Identifying Employee Data by Legal Entity Id
     * @param {EmployeesApiGetIdentifyingDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApiGenerated
     */
    public getIdentifyingData(requestParameters: EmployeesApiGetIdentifyingDataRequest, options?: AxiosRequestConfig) {
        return EmployeesApiFp(this.configuration).getIdentifyingData(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Data Access: View Legal Entity Employees
     * @summary Get Employees by Legal Entity ID
     * @param {EmployeesApiListByLegalEntityIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApiGenerated
     */
    public listByLegalEntityId(requestParameters: EmployeesApiListByLegalEntityIdRequest, options?: AxiosRequestConfig) {
        return EmployeesApiFp(this.configuration).listByLegalEntityId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Data Access: View Tenant Employees
     * @summary Get Employees By TenantID
     * @param {EmployeesApiListByTenantIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApiGenerated
     */
    public listByTenantId(requestParameters: EmployeesApiListByTenantIdRequest, options?: AxiosRequestConfig) {
        return EmployeesApiFp(this.configuration).listByTenantId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This immediately updates an employee\'s contact information and associated Person\'s in Paycor\'s system.              Data Access: Update Employee Contact
     * @summary Update Employee Contact
     * @param {EmployeesApiUpdateContactRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApiGenerated
     */
    public updateContact(requestParameters: EmployeesApiUpdateContactRequest, options?: AxiosRequestConfig) {
        return EmployeesApiFp(this.configuration).updateContact(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint updates an employee\'s paygroup.              Data Access: Update Employee Paygroup
     * @summary Update Employee Paygroup
     * @param {EmployeesApiUpdatePaygroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApiGenerated
     */
    public updatePaygroup(requestParameters: EmployeesApiUpdatePaygroupRequest, options?: AxiosRequestConfig) {
        return EmployeesApiFp(this.configuration).updatePaygroup(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint updates an employee\'s personal information.              Data Access: Update Employee Identifying Data
     * @summary Update Employee Personal data
     * @param {EmployeesApiUpdatePersonalDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApiGenerated
     */
    public updatePersonalData(requestParameters: EmployeesApiUpdatePersonalDataRequest, options?: AxiosRequestConfig) {
        return EmployeesApiFp(this.configuration).updatePersonalData(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint updates an employee\'s status and position information.              Data Access: Update Employee Position And Status
     * @summary Update Employee Position and Status data
     * @param {EmployeesApiUpdatePositionAndStatusDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApiGenerated
     */
    public updatePositionAndStatusData(requestParameters: EmployeesApiUpdatePositionAndStatusDataRequest, options?: AxiosRequestConfig) {
        return EmployeesApiFp(this.configuration).updatePositionAndStatusData(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint updates an employee\'s position information.              Data Access: Update Employee Position
     * @summary Update Employee Position data
     * @param {EmployeesApiUpdatePositionDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApiGenerated
     */
    public updatePositionData(requestParameters: EmployeesApiUpdatePositionDataRequest, options?: AxiosRequestConfig) {
        return EmployeesApiFp(this.configuration).updatePositionData(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint updates an employee status information.              Data Access: Update Employee Status Data
     * @summary Update Employee Status data
     * @param {EmployeesApiUpdateStatusDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApiGenerated
     */
    public updateStatusData(requestParameters: EmployeesApiUpdateStatusDataRequest, options?: AxiosRequestConfig) {
        return EmployeesApiFp(this.configuration).updateStatusData(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
