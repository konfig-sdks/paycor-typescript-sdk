/*
Paycor Public API


Welcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section. 

# Getting Started

<strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>

# GET, PUT, POST

* When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc]. 
* When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system.
* When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'


# Error Handling

* 400: Please consult the response text to correct your request information. 
* 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key. 
* 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header.
* 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen. 
* 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state. 
* 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.
  * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs). 
* 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.


# IDs

* ClientId = LegalEntityId
* TenantId = CompanyId
* EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API

# Earnings, Deductions, Taxes

This section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints. 

Paycor stores Earnings, Deductions, and Taxes each at three levels:
* Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):
  * Earnings: REG, OT
  * Taxes: FITWH, SOC, SOCER, OHCIN
  * Deductions: 401k, KMat, H125, UWay
* Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code. 
  * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints. 
* Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code
  * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden. 

# Authentication

<!-- ReDoc-Inject: <security-definitions> -->

The version of the OpenAPI document: 


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/
import type * as buffer from "buffer"

import { DisabilityStatus } from './disability-status';
import { EmploymentStatus } from './employment-status';
import { EmploymentType } from './employment-type';
import { EthnicityType } from './ethnicity-type';
import { FlsaType } from './flsa-type';
import { Gender } from './gender';
import { GenericAddress } from './generic-address';
import { MaritalStatus } from './marital-status';
import { Phone } from './phone';
import { Prefix } from './prefix';
import { Suffix } from './suffix';
import { VeteranStatus } from './veteran-status';

/**
 * The Create Employee model represents Employee related information needed to create a new employee (a new hire).
 * @export
 * @interface Employee2
 */
export interface Employee2 {
    /**
     * Employee\'s LegalEntityId.             
     * @type {number}
     * @memberof Employee2
     */
    'LegalEntityId': number;
    /**
     * Unique number of the employee in the tenant. Generated by Paycor if not provided.             
     * @type {number}
     * @memberof Employee2
     */
    'EmployeeNumber'?: number | null;
    /**
     * Can be up to 9 characters, Requires Alternate Employee Number product offering.
     * @type {string}
     * @memberof Employee2
     */
    'AlternateEmployeeNumber'?: string | null;
    /**
     * Enumeration of valid Prefix values.
     * @type {Prefix}
     * @memberof Employee2
     */
    'Prefix'?: Prefix;
    /**
     * First name of the employee.
     * @type {string}
     * @memberof Employee2
     */
    'FirstName': string;
    /**
     * Middle name of the employee.
     * @type {string}
     * @memberof Employee2
     */
    'MiddleName'?: string | null;
    /**
     * Last name of the employee.
     * @type {string}
     * @memberof Employee2
     */
    'LastName': string;
    /**
     * Enumeration of valid Suffix values.
     * @type {Suffix}
     * @memberof Employee2
     */
    'Suffix'?: Suffix;
    /**
     * Home Email Information of an employee.             
     * @type {string}
     * @memberof Employee2
     */
    'HomeEmail'?: string | null;
    /**
     * Work Email Information of an employee.             
     * @type {string}
     * @memberof Employee2
     */
    'WorkEmail'?: string | null;
    /**
     * List of type Phone containing phone numbers of the employee. Accepts home,mobile and work phone numbers, upto 1 of each type. Mobile phone is accepted only if home contact is provided.              
     * @type {Array<Phone>}
     * @memberof Employee2
     */
    'Phones'?: Array<Phone> | null;
    /**
     * Social security number of the employee.
     * @type {string}
     * @memberof Employee2
     */
    'SocialSecurityNumber'?: string | null;
    /**
     * Date of birth of the employee following the ISO 8601 standard. Format: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) 
     * @type {string}
     * @memberof Employee2
     */
    'BirthDate'?: string | null;
    /**
     * Enumeration of valid Gender values.
     * @type {Gender}
     * @memberof Employee2
     */
    'Gender'?: Gender;
    /**
     * Enumeration of valid Ethnicity Type values.             
     * @type {EthnicityType}
     * @memberof Employee2
     */
    'Ethnicity'?: EthnicityType;
    /**
     * Enumeration of valid Marital Status values.             
     * @type {MaritalStatus}
     * @memberof Employee2
     */
    'MaritalStatus'?: MaritalStatus;
    /**
     * The name of the Work Location to associate with new hire.  * Must be an existing Work Location. Use API \'GET Legal Entity Work Location by Legal Entity ID\' to retrieve a list of valid names.             
     * @type {string}
     * @memberof Employee2
     */
    'WorkLocation'?: string | null;
    /**
     * Name of the Job Title to associate with new hire.  * Must be an existing Job setup on the Tenant. Use API \'GET Tenant Job Titles by TenantId\' to retrieve a list of valid names.             
     * @type {string}
     * @memberof Employee2
     */
    'JobTitle'?: string | null;
    /**
     * Date the employee was hired following the ISO 8601 standard.. Format: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard)              
     * @type {string}
     * @memberof Employee2
     */
    'HireDate': string;
    /**
     * Re-hire date of the employee. Terminated employees can be rehired.  Format: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) 
     * @type {string}
     * @memberof Employee2
     */
    'ReHireDate'?: string | null;
    /**
     * Enumeration of valid Employment Status values.             
     * @type {EmploymentStatus}
     * @memberof Employee2
     */
    'Status': EmploymentStatus;
    /**
     * Enumeration of valid Types of Fair Labor Standards Act (FLSA) employment values.             
     * @type {FlsaType}
     * @memberof Employee2
     */
    'Flsa'?: FlsaType;
    /**
     * Enumeration of valid Employment Type values.             
     * @type {EmploymentType}
     * @memberof Employee2
     */
    'Type'?: EmploymentType;
    /**
     * Unique identifier of the manager in Paycor\'s system. Generated by Paycor.
     * @type {string}
     * @memberof Employee2
     */
    'ManagerEmpId'?: string | null;
    /**
     * The description of the paygroup that the employee belongs to.  * Must be existing Paygroup. Call GET Pay Groups by LegalEntityID to lookup valid values in the field \"PaygroupName\".              
     * @type {string}
     * @memberof Employee2
     */
    'PaygroupDescription': string;
    /**
     * The department code that the employee belongs to.   * Must be existing Department. Call Get Legal Entity Departments by LegalEntityID to get valid Code value.             
     * @type {number}
     * @memberof Employee2
     */
    'DepartmentCode': number;
    /**
     * Enumeration of valid Veteran Status values.             
     * @type {VeteranStatus}
     * @memberof Employee2
     */
    'Veteran'?: VeteranStatus;
    /**
     * Enumeration of valid Disability Status values.
     * @type {DisabilityStatus}
     * @memberof Employee2
     */
    'Disability'?: DisabilityStatus;
    /**
     * 
     * @type {GenericAddress}
     * @memberof Employee2
     */
    'PrimaryAddress': GenericAddress;
}

